USE [CBDB_STAGE]
GO
DROP PROCEDURE IF EXISTS [dbo].[LMS_FINALIZER]
/****** Object:  StoredProcedure [dbo].[LMS_FINALIZER]    Script Date: 23/10/2019 9:41:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[LMS_FINALIZER]
AS
BEGIN

/**********************INITIALIZATION*********************/
DECLARE @HEADER_ID BIGINT, @BIZ_DATE DATE, @IS_TABLE_COMPLETED INT, @ROWS_INSERTED INT;
DECLARE @ID_CONTROL BIGINT, @BATCH_SIZE BIGINT = 100000, @RESULTS BIGINT; --VARIABLES FOR BATCH INSERT
DECLARE @MODULE_CODE VARCHAR(50) = 'LON'
DECLARE @SCHEMA_NAME VARCHAR(50) = 'LMS'
DECLARE @STAGE_TABLE_NAME VARCHAR(100) = ''
DECLARE @REPORT_TABLE_NAME VARCHAR(100) = ''
DECLARE @IS_DUMP BIT = 0
DECLARE @DETAIL_ID BIGINT = 0
DECLARE @ERR_MSG VARCHAR(MAX) = ''
DECLARE @SP_NAME VARCHAR(50) = 'LMS_FINALIZER'
DECLARE @TABLE_COUNT INT = 0			   --FOR SP LOG
DECLARE @TABLE_SUCCEEDED INT = 0		   --FOR SP LOG
DECLARE @TOTAL_INSERTED_RECORDS BIGINT = 0 --FOR SP LOG
DECLARE @DURATION INT = 0
DECLARE @SRC_HEADER_ID BIGINT, @SRC_MODULE_CODE VARCHAR(50), @SRC_SCHEMA_NAME VARCHAR(50)

SET NOCOUNT ON;  --OPTIMIZATION
SELECT @HEADER_ID = ID,@MODULE_CODE = MODULE_CODE,@BIZ_DATE = BUSINESS_DATE FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) 
WHERE ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = @MODULE_CODE);

SET @TABLE_COUNT = ISNULL((SELECT COUNT(TABLE_NAME) FROM CBDB_REPORTS.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = @SCHEMA_NAME),0)

--INTERNAL PICKLIST
DECLARE @PLIST TABLE(CATEGORY VARCHAR(60),CODE VARCHAR(30),[DESCRIPTION] VARCHAR(80))
--MODE OF PAYMENT PICKLIST
INSERT INTO @PLIST(CATEGORY, CODE, DESCRIPTION) VALUES ('MODE_OF_PAYMENT','1', 'Post Dated Check'),('MODE_OF_PAYMENT','2', 'Savings Deduction'),('MODE_OF_PAYMENT','3', 'Over the Counter'),('MODE_OF_PAYMENT','4', 'Payroll Deduction'),('MODE_OF_PAYMENT','5', 'Dividend Deduction'),('MODE_OF_PAYMENT','6', 'Bonus Deduction') --MODE OF PAYMENT
													  --,('COLLATERAL_TYPE','1', 'PROPERTY'),('COLLATERAL_TYPE','2', 'VEHICLE'),('COLLATERAL_TYPE','3', 'DEPOSIT') --COLLATERAL TYPE
													  ,('REPA_STATUS','0', 'NO APPLICABLE'),('REPA_STATUS','1', 'ENCODED'),('REPA_STATUS','2', 'RECEIVED'),('REPA_STATUS','3', 'RELEASED'),('REPA_STATUS','4', 'DELIVERED'),('REPA_STATUS','5', 'PAID') --REPA_STATUS_DESC
													  ,('PAYMENT_TYPE','0', 'NO APPLICABLE'),('PAYMENT_TYPE','1', 'LOAN PROCEED'),('PAYMENT_TYPE','2', 'CHARGED TO RSD'),('PAYMENT_TYPE','3', 'RECURRING COST') --PAYMENT TYPE
													  ,('REMITTANCE_TYPE','1', 'PAYROLL DEDUCTION'),('REMITTANCE_TYPE','2', 'EXECUTIVE HOUSING LOAN'),('REMITTANCE_TYPE','3', 'BONUS_DEDUCTION'),('REMITTANCE_TYPE','4', 'CORPORATE SAVINGS DEPOSIT DEFICIENCY'),('REMITTANCE_TYPE','5', 'OPEC') --REMITTANCE TYPE
													  ,('LOAN_TERM_TYPE','1', 'Days'),('LOAN_TERM_TYPE','2', 'Weeks'),('LOAN_TERM_TYPE','3', 'Months'),('LOAN_TERM_TYPE','4', 'Quarters'),('LOAN_TERM_TYPE','5', 'Semesters'),('LOAN_TERM_TYPE','6', 'Years') --LOAN TERM 
/*********************************************************/
--CHECK IF HEADER IS NULL THEN BREAK
IF @HEADER_ID IS NULL BEGIN
PRINT '**************************************************************'
PRINT 'SOMETHING WENT WRONG. UNABLE TO GET HEADER_ID OF MODULE : ' + @MODULE_CODE RETURN; END

--CHECK IF PROCESS IS DONE ALREADY, IF SO, THEN BREAK THE PROCESSS
IF EXISTS(SELECT 1 FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(NOLOCK) WHERE BUSINESS_DATE = @BIZ_DATE AND [STATUS] = 4 AND MODULE_CODE = @MODULE_CODE) BEGIN PRINT 'PROCESS SKIPPED. ' + @MODULE_CODE + ' DATA ALREADY EXISTS.' RETURN; END

--CHECK IF ID IN STAGE AND REPORTS WOULD MATCH
--IF(@HEADER_ID <> (SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = @MODULE_CODE)) BEGIN PRINT 'HEADER_ID IN CBDB_STAGE AND CBDB_REPORTS DO NOT MATCH : ' + @MODULE_CODE RETURN; END
/*************************CMN.DATA_COPY_HEADER[START]*************************/
PRINT CHAR(13) + '*************************************************************************** ' + @SCHEMA_NAME + ' FINALIZER *********************************************************************************'
IF NOT EXISTS (SELECT 1 FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(NOLOCK) WHERE BUSINESS_DATE = @BIZ_DATE AND MODULE_CODE = @MODULE_CODE)
BEGIN
	BEGIN TRAN
		SET IDENTITY_INSERT CBDB_REPORTS.CMN.DATA_COPY_HEADER ON
		
		INSERT INTO CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(TABLOCK) (ID, MODULE_CODE, BUSINESS_DATE, TOTAL_DUMP_RECORD, TOTAL_DELTA_RECORD,TIME_STARTED,[STATUS]) 
			   VALUES (@HEADER_ID, @MODULE_CODE, @BIZ_DATE, 0,0,GETDATE(),1);
		SET IDENTITY_INSERT CBDB_REPORTS.CMN.DATA_COPY_HEADER OFF
	COMMIT TRAN
	INSERT INTO CBDB_REPORTS.RPT.SP_LOG (HEADER_ID  ,NAME	  ,BUSINESS_DATE  ,TIME_STARTED ,STATUS)
								VALUES		(@HEADER_ID ,@SP_NAME ,@BIZ_DATE ,GETDATE()    ,1)
		PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
		PRINT 'STATUS : STARTED   | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | TIME STARTED : ' + CAST(GETDATE() AS VARCHAR(MAX)) + ' | BUSINESS DATE : ' + CAST(@BIZ_DATE AS VARCHAR(MAX))	
END
/*************************CMN.DATA_COPY_HEADER[END]**************************/

/*************************LMS.ACCOUNT_MASTER[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_INFO'
	SET @REPORT_TABLE_NAME = 'LMS.ACCOUNT_MASTER'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.ACCOUNT_INFO WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)

		--BATCH INSERT OF 100000
		BEGIN TRY	
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.ACCOUNT_MASTER WITH(TABLOCK) 
						(HEADER_ID        ,ACCOUNT_NO   ,MEMBER_NO,BILLING_GROUP                            ,EMPLOYEE_NO     ,ACCT_NAME      ,LAST_NAME   ,FIRST_NAME   ,MIDDLE_NAME   ,PRODUCT_CODE   ,PRODUCT_NAME   ,PRODUCT_SHORT_NAME   ,LOAN_AMOUNT                             ,PRINCIPAL_AMOUNT         ,INTEREST_AMOUNT         ,NET_PROCEEDS                                                  ,APPROVAL_DATE   ,RELEASED_DATE                         ,OPEN_DATE   ,LOAN_BALANCE                                     ,PRINCIPAL_BALANCE    ,INTEREST_BALANCE    ,AIR_BALANCE       ,TOTAL_OVERDUE				   	  ,PRINCIPAL_OVERDUE        ,INTEREST_OVERDUE        ,PENALTY											  ,TERM        ,INTEREST_RATE      ,MATURITY_DATE   ,MODE_OF_PAYMENT                        ,MONTHLY_AMORT           ,MA_PRINCIPAL          ,MA_INTEREST          ,ACCT_STATUS										  ,PROCESSOR                       ,MONTLY_GROSS_INC ,SBL                             ,BOT_APPROVAL_DATE                               ,BOT_RESO_NO         ,MODE_OF_PAYOUT         ,BRANCH_CODE   ,IS_CLOSE   ,CLOSE_DATE   ,WRITTEN_OFF   ,WRITTEN_OFF_DATE ,LAST_TXN_DATE              ,DATE_OF_TXR                            ,ORIGINAL_BORROWER                    ,LAST_STAT_CHANGE		 ,PAST_DUE_DATE   ,APPL_REF_NO	 		 ,WRITE_OFF_BOARD_RES_NO	,WRITE_OFF_BOARD_APP_DATE    ,BOARD_RES_NO	  ,BOARD_APP_DATE   ,CATEGORY	,BILLING_GROUP_CODE      ,MODE_OF_PAYMENT_CODE , ACCOUNT_STATUS_CODE   ,IS_SECURED                                           ,APPL_TYPE       ,APPL_TYPE_CODE    ,IS_STAGGERED										   ,IS_REAL_ESTATE								,FIRST_RELEASE_DATE               ,NEXT_AMORT_DATE     ,DEDUCTION_CODE     ,DEDUCTION_CODE_DESC		,OLD_ACCOUNT_NO        ,LIT_NO   ,IS_CAR                                 ,LOAN_CODE   ,SCHEDULE_NO_OF_PAYMENT      ,REMAINING_TERM       ,PAYMENT_FREQUENCY												,LOAN_TERM_TYPE		,LOAN_TERM_TYPE_DESC, FULLY_PAID_DATE)
				SELECT @HEADER_ID        ,AI.ACCOUNT_NO,AI.CIF_NO,CBG.BILLING_GROUP_DESC AS 'BILLING_GROUP',CL.SERIAL_NUMBER,AI.ACCOUNT_NAME,CL.LAST_NAME,CL.FIRST_NAME,CL.MIDDLE_NAME ,PD.PRODUCT_CODE,PD.PRODUCT_NAME,PD.PRODUCT_SHORT_NAME,AI.TOTAL_PRINCIPAL_AMOUNT AS LOAN_AMOUNT,AI.TOTAL_PRINCIPAL_AMOUNT,AI.TOTAL_INTEREST_AMOUNT,ISNULL(AINFO.DISBURSE_NET_AMOUNT, STAG.DISBURSE_NET_AMOUNT) AS 'NET_PROCEEDS'  /*CLARIFICATION*/,AI.APPROVAL_DATE,AI.DISBURSEMENT_DATE AS 'RELEASE_DATE',AI.OPEN_DATE,LN_BAL.OUTSTD_TOTAL_LOAN_AMOUNT AS 'LOAN_BALANCE',DAI.PRINCIPAL_BALANCE,DAI.INTEREST_BALANCE,DAI.CUMULATIVE_AIR, AITEM.OVERDUE AS 'TOTAL_OVERDUE',DAI.SUM_PRINCIPAL_OVERDUE,DAI.SUM_INTEREST_OVERDUE,LN_BAL.OUTSTD_LPC_AMOUNT AS PENALTY /*CLARIFICATION*/,AI.LOAN_TERM,AINFO.INTEREST_RATE,AI.MATURITY_DATE,NP_MOD.DESCRIPTION AS 'MODE_OF_PAYMENT',AINFO.INSTALLMENT_AMOUNT,AINFO.PRINCIPAL_AMOUNT,AINFO.INTEREST_AMOUNT,LN_STAT.ACCOUNT_STATUS_TYPE_NAME AS 'ACCT_STATUS',AI.PROCESSOR_NAME AS 'PROCESSOR',MPAYR.BASIC_SALARY,NULL AS 'SBL' /*CLARIFICATION*/,CL.BOT_CONFIRMATION_DATE AS  'BOT_APPROVAL_DATE',CL.BOT_RESOLUTION_NO,AI.MODE_OF_PAYMENT_TYPE,AI.BRANCH_CODE,AI.IS_CLOSE,AI.CLOSE_DATE,AI.WRITTEN_OFF,AI.WRITE_OFF_DATE,AI.LAST_MONETARY_TRANS_DATE,COM.BILL_TRANSFER_DATE AS 'DATE_OF_TXR',AI.ACCOUNT_NAME AS'ORGINAL_BORROWER' ,AI.STATUS_CHANGED_DATE ,AI.PAST_DUE_DATE,AI.APPLICATION_REF_NO ,AI.WRITE_OFF_BOARD_RES_NO ,AI.WRITE_OFF_BOARD_APP_DATE ,AI.BOARD_RES_NO ,AI.BOARD_APP_DATE,POC.CATEGORY,CL.BILLING_GROUP_CODE ,AI.MODE_OF_PAYMENT_TYPE, AI.ACCOUNT_STATUS_CODE,IIF(POC.COLLATERAL_HOLD_TYPE <> 0,1,0) AS IS_SECURED ,APLT.DESCRIPTION,AI.APPLICATION_TYPE,IIF(STAG.ACCOUNT_NO IS NOT NULL,1,0) AS 'IS_STAGGERED',IIF(POC.CATEGORY = 4,1,0) AS 'IS_REAL_STATE',AINFO_FRD.LOAN_DISBURSEMENT_DATE,AINFO.NEXT_DUE_DATE ,CDC.DEDUCTION_CODE ,CDC.DEDUCTION_CODE_DESC ,AI.MIGRATED_ACCOUNT_NO,AI.LIT_NO, IIF(POC.CATEGORY = 2,1,0) AS 'IS_CAR',PD.LOAN_CODE,AINFO.SCHEDULE_NO_OF_PAYMENT,LN_BAL.REMAINING_TERM,AI.PAYMENT_FREQUENCY_TYPE   ,PD.LOAN_TERM_TYPE  ,PD_LT.DESCRIPTION  , AI.FULLY_PAID_DATE
				FROM CBDB_STAGE.LMS.ACCOUNT_INFO AI WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.MMS.CLIENT_EMPLOYMENT_HISTORY CEH WITH(NOLOCK) 
					ON AI.CIF_NO = CEH.CIF_NO AND CEH.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CLIENT_EMPLOYMENT_HISTORY WITH(NOLOCK) WHERE CIF_NO = AI.CIF_NO)
				LEFT JOIN CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK)
					ON AI.CIF_NO = CL.CIF_NO
				LEFT JOIN CBDB_STAGE.LMS.PRODUCT PD WITH(NOLOCK)
					ON AI.LOAN_PRODUCT_CODE = PD.LOAN_PRODUCT_CODE
				LEFT JOIN @PLIST PD_LT
					ON PD.LOAN_TERM_TYPE = PD_LT.CODE AND PD_LT.CATEGORY = 'LOAN_TERM_TYPE'
				LEFT JOIN CBDB_STAGE.LMS.AMORTIZATION_INFO AINFO WITH(NOLOCK)
					ON AI.ACCOUNT_NO = AINFO.ACCOUNT_NO AND AINFO.STAGE_DISBURSE_NO = 0 AND AINFO.REPRICING_NO = 0
				LEFT JOIN CBDB_STAGE.LMS.AMORTIZATION_INFO AINFO_FRD WITH(NOLOCK)
					ON AI.ACCOUNT_NO = AINFO_FRD.ACCOUNT_NO AND AINFO_FRD.STAGE_DISBURSE_NO = 1 AND AINFO_FRD.REPRICING_NO = 0
				LEFT JOIN 
					(SELECT ACCOUNT_NO, SUM(DISBURSE_NET_AMOUNT) 'DISBURSE_NET_AMOUNT' FROM CBDB_STAGE.LMS.AMORTIZATION_INFO WHERE STAGE_DISBURSE_NO > 0  GROUP BY ACCOUNT_NO) STAG
					ON STAG.ACCOUNT_NO = AI.ACCOUNT_NO
				LEFT JOIN CBDB_STAGE.LMS.DAILY_ACCOUNT_INFO DAI WITH(NOLOCK)
					ON AINFO.AMORTIZATION_INFO_ID = DAI.AMORTIZATION_INFO_ID
				LEFT JOIN CBDB_STAGE.LMS.CFG_ACCOUNT_STATUS_TYPE LN_STAT WITH(NOLOCK)
					ON AI.ACCOUNT_STATUS_CODE = LN_STAT.ACCOUNT_STATUS_TYPE_CODE 
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY LST_STAT WITH(NOLOCK)
					ON AI.ACCOUNT_NO = LST_STAT.ACCOUNT_NO AND LST_STAT.ID = (SELECT TOP 1 ID FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY WITH(NOLOCK) WHERE ACCOUNT_NO = AI.ACCOUNT_NO ORDER BY TRAN_DATE, ID DESC)
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY LST_PD WITH(NOLOCK)
					ON AI.ACCOUNT_NO = LST_PD.ACCOUNT_NO AND LST_PD.ID = (SELECT TOP 1 ID FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY WITH(NOLOCK) WHERE ACCOUNT_NO = AI.ACCOUNT_NO AND LAST_ACCOUNT_STATUS_CODE = 3 ORDER BY TRAN_DATE, ID DESC)
				LEFT JOIN CBDB_STAGE.MMS.CFG_BILLING_GROUP CBG WITH(NOLOCK)
					ON CL.BILLING_GROUP_CODE = CBG.BILLING_GROUP_CODE AND CL.CORP_CODE = CBG.CORPORATE_CODE						
				LEFT JOIN 
				   (SELECT AIT.AMORTIZATION_INFO_ID, SUM(AIT.INSTALLMENT_OUTSTD_INTEREST) + SUM(AIT.INSTALLMENT_OUTSTD_PRINCIPAL) + SUM(AIT.INSTALLMENT_OUTSTD_LPC) + SUM(AIT.INSTALLMENT_OUTSTD_CHARGE) + SUM(AIT.INSTALLMENT_OUTSTD_RECURRING_COST) + SUM(AIT.INSTALLMENT_OUTSTD_INT_CHARGE) AS OVERDUE
					FROM CBDB_STAGE.LMS.AMORTIZATION_ITEM AIT WITH(NOLOCK)
					LEFT JOIN 
						(SELECT MAX(ID) AS ID ,AMORTIZATION_INFO_ID FROM CBDB_STAGE.LMS.AMORTIZATION_ITEM WITH(NOLOCK)
							GROUP BY AMORTIZATION_INFO_ID) B
					ON AIT.AMORTIZATION_INFO_ID = B.AMORTIZATION_INFO_ID AND AIT.ID = B.ID
					WHERE B.AMORTIZATION_INFO_ID IS NULL
					GROUP BY AIT.AMORTIZATION_INFO_ID
					) AITEM
					ON AINFO.AMORTIZATION_INFO_ID = AITEM.AMORTIZATION_INFO_ID
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_CO_MAKER COM WITH(NOLOCK)
					ON AI.ACCOUNT_NO = COM.ACCOUNT_NO AND COM.ID = (SELECT MAX(ID) FROM CBDB_STAGE.LMS.ACCOUNT_CO_MAKER WITH(NOLOCK) WHERE ACCOUNT_NO = AI.ACCOUNT_NO)
				LEFT JOIN CBDB_STAGE.LMS.PRODUCT_OTHER_CONFIG POC WITH(NOLOCK)
					ON PD.PRODUCT_CODE = RIGHT(POC.ORG_LOAN_PRODUCT_CODE,3)
				LEFT JOIN CBDB_STAGE.dbo.[VW_ACCOUNT_OUT_AMOUNT] LN_BAL
					ON AI.ACCOUNT_NO = LN_BAL.ACCOUNT_NO
				LEFT JOIN @PLIST NP_MOD 
					ON AI.MODE_OF_PAYMENT_TYPE = NP_MOD.CODE AND NP_MOD.CATEGORY = 'MODE_OF_PAYMENT'
				LEFT JOIN CBDB_STAGE.MMS.PAYROLL MPAYR WITH(NOLOCK)
					ON AI.CIF_NO = MPAYR.CIF_NO AND MPAYR.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.PAYROLL WHERE CIF_NO = AI.CIF_NO)
				LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST APLT WITH(NOLOCK)
					ON AI.APPLICATION_TYPE = APLT.CODE AND APLT.CATEGORY = 'BDS_ACC_APPL_TYPE'
				LEFT JOIN CBDB_STAGE.CMn.CFG_DEDUCTION_CODE CDC WITH(NOLOCK)
					ON  RIGHT(AI.LOAN_PRODUCT_CODE,3) = CDC.PRODUCT_CODE
					AND CL.CORP_CODE = CDC.CORPORATE_CODE
					AND CL.BILLING_GROUP_CODE = CDC.BILLING_GROUP_CODE
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE AI.ID >= @ID_CONTROL AND AI.ID < @ID_CONTROL + @BATCH_SIZE AND AI.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.ACCOUNT_MASTER[END]**************************/

/*************************LMS.ACCOUNT_PDC[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_PDC'
	SET @REPORT_TABLE_NAME = 'LMS.ACCOUNT_PDC'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.ACCOUNT_PDC WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.ACCOUNT_PDC WITH(TABLOCK)
						(HEADER_ID,AMORTIZATION_INFO_ID    ,ACCOUNT_NO      ,INSTALLMENT_NO                                                 ,INSTALLMENT_DUE_DATE    ,CHECK_NO    ,FLOAT_DAYS    ,ISSUE_DATE    ,CHECK_AMOUNT    ,DRAWER_ACCOUNT_NO    ,DRAWER_BANK_CODE    ,DRAWER_NAME    ,DRAWER_BRANCH_NAME    ,CHECK_STATUS    ,BRANCH_CODE    ,BRSTN    ,FLOAT_ROLL_DOWN    ,POSTED_DATE)
				SELECT  @HEADER_ID,PDC.AMORTIZATION_INFO_ID,AINFO.ACCOUNT_NO,PDC.INSTALLMENT_NO AS 'INSTALLMENT_NO'/*WENT MISSING IN STAGE*/,PDC.INSTALLMENT_DUE_DATE,PDC.CHECK_NO,PDC.FLOAT_DAYS,PDC.ISSUE_DATE,PDC.CHECK_AMOUNT,PDC.DRAWER_ACCOUNT_NO,PDC.DRAWER_BANK_CODE,PDC.DRAWER_NAME,PDC.DRAWER_BRANCH_NAME,PDC.CHECK_STATUS,PDC.BRANCH_CODE,PDC.BRSTN,PDC.FLOAT_ROLL_DOWN,PDC.POSTED_DATE
				FROM CBDB_STAGE.LMS.ACCOUNT_PDC PDC WITH(NOLOCk)
				LEFT JOIN CBDB_STAGE.LMS.AMORTIZATION_INFO AINFO WITH(NOLOCK)
					ON PDC.AMORTIZATION_INFO_ID = AINFO.AMORTIZATION_INFO_ID
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE PDC.ID >= @ID_CONTROL AND PDC.ID < @ID_CONTROL + @BATCH_SIZE AND PDC.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.ACCOUNT_PDC[END]**************************/

/*************************LMS.ACCT_BAL_HISTORY[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_BALANCE_HISTORY'
	SET @REPORT_TABLE_NAME = 'LMS.ACCT_BAL_HISTORY'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP =  @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.ACCT_BAL_HISTORY WITH(TABLOCK)
					(HEADER_ID   ,ACCOUNT_NO    ,AMOUNT      ,TRAN_CODE    ,MNEMONIC    ,TRAN_DESCRIPTION,BUSINESS_DATE,IS_REVERSAL                                    ,SEQ_NO        ,USER_NAME     ,SOA_APPLICABLE	 ,OR_AR_DATE		            ,OR_NO	  ,AR_NO                      ,HOST_ID  ,TRAN_TYPE    ,BRANCH_CODE    ,PRINCIPAL_BALANCE    ,INTEREST_BALANCE    ,AIR_BALANCE    ,DEPOSIT_ACCOUNT_NO  ,ACCOUNT_STATUS_CODE)
				SELECT @HEADER_ID,ABH.ACCOUNT_NO,ABH.AMOUNT,ABH.TRAN_CODE,ABH.MNEMONIC,ITEM.TRAN_NAME  ,ABH.TRAN_DATE,IIF(REVERSAL_ID IS NULL, 0, 1) AS 'IS_REVERSAL',ABH.SEQUENCENO,ABH.USER_NAME ,ITEM.SOA_APPLICABLE,BJOR.TRAN_DATE AS 'OR_AR_DATE',ABH.OR_NO,BJOR.ACKNOWLEDGE_RECEIPT ,ABH.HOST_ID,ABH.TRAN_TYPE,ABH.BRANCH_CODE,ABH.PRINCIPAL_BALANCE,ABH.INTEREST_BALANCE,ABH.AIR_BALANCE,ABH.DEPOSIT_ACCOUNT_NO,ABH.ACCOUNT_STATUS
				FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY ABH WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.CMN.TRAN_ITEM ITEM WITH(NOLOCK)
					ON ABH.TRAN_CODE = ITEM.TRAN_CODE
				LEFT JOIN CBDB_STAGE.CMN.BIZ_JOURNAL BJOR WITH(NOLOCK)
					ON ABH.ACCOUNT_NO = BJOR.ACCOUNT_NO AND ABH.TRAN_CODE = BJOR.TRAN_CODE AND ABH.BRANCH_CODE = BJOR.BRANCH_CODE AND ABH.TRAN_DATE = BJOR.TRAN_DATE AND ABH.USER_NAME = BJOR.USER_NAME
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ABH.ID >= @ID_CONTROL AND ABH.ID < @ID_CONTROL + @BATCH_SIZE	AND ABH.HEADER_ID = @HEADER_ID--BATCH CONTROL OF THE CURRENT BATCH	
				ORDER BY ABH.TRAN_DATE,ISNULL(ABH.HOST_ID,ABH.ID) --RECTIFY ORDER INSERT;
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.ACCT_BAL_HISTORY[END]**************************/

/*************************LMS.COLLATERAL[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_COLLATERAL'
	SET @REPORT_TABLE_NAME = 'LMS.COLLATERAL'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.ACCOUNT_COLLATERAL WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.COLLATERAL WITH(TABLOCK)
					(HEADER_ID	 ,ACCOUNT_NO   ,COLLATERAL_TYPE     ,TCT_NO         ,TAX_DEC_NO             ,TAX_START_DATE     ,TAX_END_DATE     ,TAX_OR_NO    ,REG_NO          ,APPRAISAL_VALUE    ,LOT_NO     ,BLOCK_NO     ,STREET     ,SUBDIVISION      ,BARANGAY     ,PROVINCE     ,TOWN     ,MODEL_VEHICLE  ,REG_NO_VEHICLE     ,MAKE_NAME   ,VEHICLE_TYPE    ,ENGINE_NO    ,CHASIS_NO     ,PLATE_NO        ,COLLATERAL_ADDRESS ,COLLATERAL_TYPE_DESC ,COLLATERAL_ID    ,PROPERTY_TYPE_DESC     ,COLLATERAL_STATUS		,VEHICLE_DESCRIPTION	,VEHICLE_DEALER_NAME	,VEHICLE_DEALER_ADDR	   ,VEHICLE_REG_RECEIPT_NO		,VEHICLE_REG_RECEIPT_DATE)
				SELECT @HEADER_ID,AC.ACCOUNT_NO,COLL.COLLATERAL_TYPE,PROP.LAND_TITLE,PROP.TAX_DECLARATION_NO,TI.COVER_START_DATE,TI.COVER_END_DATE,TI.RECEIPT_NO,VEH.REGISTRATION_NO AS 'REG_NO',APP.APPRAISED_VALUE,PROP.LOT_NO,PROP.BLOCK_NO,PROP.STREET,PROP.SUB_DIVISION,PROP.BARANGAY,PROP.PROVINCE,PROP.TOWN,VMOD.MODEL_NAME,VEH.REGISTRATION_NO,MK.MAKE_NAME,VEH.VEHICLE_TYPE,VEH.ENGINE_NO,VEH.CHASSIS_NO,VEH.CAR_PLATE_NO
				,((ISNULL(PROP.LOT_NO + ' ','') + ISNULL(PROP.BLOCK_NO + ' ','') + ISNULL(PROP.STREET + ' ','') + ISNULL(PROP.SUB_DIVISION + ' ','') + ISNULL(PROP.BARANGAY + ', ','')) + ISNULL((CASE WHEN PROP.CITY IS NOT NULL THEN PROP.CITY ELSE PROP.TOWN END),'') + + ISNULL(PROP.PROVINCE,'')) AS 'COLL_ADDRESS'																												,CTYPE.NAME           ,COLL.COLLATERAL_ID,CPT.PROPERTY_TYPE_NAME,COLL.COLLATERAL_STATUS	,VEH.DESCRIPTION		,VEH.DEALER_NAME		,VEH.DEALER_ADDRESS		   ,VEH.REGISTERED_RECEIPT_NO ,VEH.REGISTERED_RECEIPT_DATE
				FROM CBDB_STAGE.LMS.ACCOUNT_COLLATERAL AC WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.CTL.COLLATERAL COLL WITH(NOLOCK)
					ON COLL.COLLATERAL_ID = AC.COLLATERAL_REF_ID
				LEFT JOIN CBDB_STAGE.CTL.PROPERTY PROP WITH(NOLOCK)
					ON COLL.PROPERTY_ID = CAST(PROP.PROPERTY_GUID AS NVARCHAR(36))
				LEFT JOIN CBDB_STAGE.CTL.TAX_INSURANCE TI WITH(NOLOCK)
					ON COLL.COLLATERAL_ID = TI.COLLATERAL_ID AND TI.ID = (SELECT MAX(ID) FROM CBDB_STAGE.CTL.TAX_INSURANCE WITH(NOLOCK) WHERE COLLATERAL_ID = COLL.COLLATERAL_ID)
				LEFT JOIN CBDB_STAGE.CTL.APPRAISAL APP WITH(NOLOCK)
					ON COLL.COLLATERAL_ID = APP.COLLATERAL_ID AND APP.ID = (SELECT MAX(ID) FROM CBDB_STAGE.CTL.APPRAISAL WITH(NOLOCK) WHERE COLLATERAL_ID = COLL.COLLATERAL_ID)
				LEFT JOIN CBDB_STAGE.CTL.VEHICLE VEH WITH(NOLOCK)
					ON COLL.VEHICLE_ID = CAST(VEH.VEHICLE_GUID AS NVARCHAR(36))
				LEFT JOIN  CBDB_STAGE.CTL.CFG_MODEL VMOD WITH(NOLOCK)
					ON VEH.MODEL_CODE = VMOD.MODEL_CODE
				LEFT JOIN CBDB_STAGE.CTL.CFG_MAKE MK WITH(NOLOCK)
					ON VEH.MAKE_CODE = MK.MAKE_CODE
				LEFT JOIN CBDB_STAGE.[CTL].[COLLATERAL_TYPE] CTYPE 
					ON COLL.COLLATERAL_TYPE = CTYPE.CODE
				LEFT JOIN CBDB_STAGE.CTL.CFG_PROPERTY_TYPE CPT WITH(NOLOCK)
					ON PROP.PROPERTY_TYPE_CODE = CPT.PROPERTY_TYPE_CODE
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE AC.ID >= @ID_CONTROL AND AC.ID < @ID_CONTROL + @BATCH_SIZE AND AC.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.COLLATERAL[END]**************************/

/*************************LMS.INSURANCE[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_INSURANCE'
	SET @REPORT_TABLE_NAME = 'LMS.INSURANCE'
	SET @IS_DUMP = 1 --AUTO-DUMP TABLE
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.ACCOUNT_INSURANCE WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		--SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.INSURANCE WITH(TABLOCK)
					(HEADER_ID   ,COLLATERAL_ID ,ACCOUNT_NO ,INSURANCE_NAME,INSURANCE_TYPE,INSURANCE_TYPE_DESC,POLICY_NO,POLICY_AMT ,PREMIUM_AMT,START_DATE,END_DATE,RENEWAL_FREQ,BATCH_NO,PAYMENT_TYPE	,EXTERNAL_INSURANCE,PAYMENT_TYPE_DESC,INSURANCE_COMPANY_CODE,INSURANCE_COMPANY_NAME)
				SELECT @HEADER_ID
					  ,AC.COLLATERAL_REF_ID 'COLLATERAL_ID'
				      ,ACI.ACCOUNT_NO 'ACCOUNT_NO'
					  ,ISNULL(NAME, CIP.COMPANY_NAME) 'INSURANCE_NAME'
					  ,'99' 'INSURANCE_TYPE'
					  ,'MRI' 'TYPE_DESCRIPTION'
					  ,POLICY_NO 'POLICY_NO'
					  ,POLICY_AMOUNT 'POLICY_AMOUNT'
					  ,AMOUNT 'PREMIUM_AMOUNT'
					  ,COVER_START_DATE 'START_DATE'
					  ,COVER_END_DATE 'END_DATE'
					  ,RENEWAL_FREQUENCY 'RENEWAL_FREQ'
					  ,NULL 'BATCH_NO'
					  ,PAYMENT_TYPE 'PAYMENT_TYPE'
					  ,CIP.EXTERNAL_INSURANCE 'EXTERNAL_INSURANCE'
					  ,NP_PYT.DESCRIPTION 'PAYMENT_TYPE_DESC'
					  ,CIP.INSURANCE_COMPANY_CODE
					  ,ISNULL(CIP.COMPANY_NAME, NAME) AS 'INSURANCE_COMPANY_CODE'
				FROM CBDB_STAGE.LMS.ACCOUNT_INSURANCE ACI WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_COLLATERAL AC WITH(NOLOCK) ON AC.ACCOUNT_NO = ACI.ACCOUNT_NO
				LEFT JOIN CBDB_STAGE.CMN.CFG_INSURANCE_PROVIDER CIP WITH(NOLOCK) ON ACI.INSURANCE_COMPANY_CODE = CIP.INSURANCE_COMPANY_CODE
				LEFT JOIN @PLIST NP_PYT ON ACI.PAYMENT_TYPE = NP_PYT.CODE AND NP_PYT.CATEGORY = 'PAYMENT_TYPE'
				
				UNION ALL
				
				SELECT @HEADER_ID
					  ,COLLATERAL_ID 'COLLATERAL_ID'
				      ,AC.ACCOUNT_NO 'ACCOUNT_NO'
					  ,ISNULL(NAME, CIP.COMPANY_NAME) 'INSURANCE_NAME'
					  ,TYPE 'INSURANCE_TYPE'
					  ,CIT.INSURANCE_DESCRIPTION 'TYPE_DESCRIPTION'
					  ,NULL 'POLICY_NO'
					  ,POLICY_AMOUNT 'POLICY_AMOUNT'
					  ,AMOUNT 'PREMIUM_AMOUNT'
					  ,COVER_START_DATE 'START_DATE'
					  ,COVER_END_DATE  'END_DATE'
					  ,NULL 'RENEWAL_FREQ'
					  ,NULL 'BATCH_NO'
					  ,PAYMENT_TYPE 'PAYMENT_TYPE'
					  ,CIP.EXTERNAL_INSURANCE 'EXTERNAL_INSURANCE'
					  ,NP_PYT.DESCRIPTION 'PAYMENT_TYPE_DESC'
					  ,CIP.INSURANCE_COMPANY_CODE
					  ,ISNULL(CIP.COMPANY_NAME, NAME) AS 'INSURANCE_COMPANY_CODE'
				FROM CBDB_STAGE.CTL.TAX_INSURANCE TI WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_COLLATERAL AC WITH(NOLOCK) ON AC.COLLATERAL_REF_ID = TI.COLLATERAL_ID
				LEFT JOIN CBDB_REPORTS.CMN.CFG_INSURANCE_TYPE CIT WITH(NOLOCK) ON TI.TYPE = CIT.INSURANCE_TYPE
				LEFT JOIN CBDB_STAGE.CMN.CFG_INSURANCE_PROVIDER CIP WITH(NOLOCK) ON TI.INSURANCE_COMPANY_CODE = CIP.INSURANCE_COMPANY_CODE
				LEFT JOIN @PLIST NP_PYT ON TI.PAYMENT_TYPE = NP_PYT.CODE AND NP_PYT.CATEGORY = 'PAYMENT_TYPE'
				WHERE TYPE <> 0
			--->END OF INSERT INTO SELECT STATEMENT		
				--WHERE AC_INS.ID >= @ID_CONTROL AND AC_INS.ID < @ID_CONTROL + @BATCH_SIZE AND AC_INS.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
				BREAK;
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.INSURANCE[END]**************************/

/*************************LMS.APPRAISAL[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'APPRAISAL'
	SET @REPORT_TABLE_NAME = 'LMS.APPRAISAL'
	SET @SRC_SCHEMA_NAME = 'CTL'
	SET @SRC_MODULE_CODE = 'CTL'

	--SPECIAL CASE RETRIEVAL OF HEADER_ID
	SELECT @SRC_HEADER_ID = ID,@SRC_MODULE_CODE = MODULE_CODE,@BIZ_DATE = BUSINESS_DATE FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) 
	WHERE ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = @SRC_MODULE_CODE);

	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.CTL.APPRAISAL WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @SRC_HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @SRC_HEADER_ID AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC),0)

		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.APPRAISAL WITH(TABLOCK) (HEADER_ID,COLLATERAL_ID    ,ACCOUNT_NO   ,NAME    ,APPRAISAL_DATE    ,APPRAISED_VALUE    ,REPA_NO    ,APPRAISER_FEE    ,ACKNOWLEDGE_RECEIPT    ,ACKNOWLEDGE_RECEIPT_DATE    ,REMARKS    ,NEXT_APPRAISAL_DATE    ,ENCODED_DATE    ,RECEIVED_DATE    ,DELIVERED_DATE    ,APPRAISAL_REF_NO    ,USER_ID    ,REPA_STATUS                     ,REPA_STATUS_DESC  ,APPRAISER_FREQUENCY)
				SELECT												@HEADER_ID ,APP.COLLATERAL_ID,AC.ACCOUNT_NO,APP.NAME,APP.APPRAISAL_DATE,APP.APPRAISED_VALUE,APP.REPA_NO,APP.APPRAISER_FEE,APP.ACKNOWLEDGE_RECEIPT,APP.ACKNOWLEDGE_RECEIPT_DATE,APP.REMARKS,APP.NEXT_APPRAISAL_DATE,APP.ENCODED_DATE,APP.RECEIVED_DATE,APP.DELIVERED_DATE,APP.APPRAISAL_REF_NO,APP.USER_ID,APP.REPA_STATUS AS 'REPA_STATUS',NP_REP.DESCRIPTION,COLL.APPRAISER_FREQUENCY
				FROM CBDB_STAGE.LMS.ACCOUNT_COLLATERAL AC WITH(NOLOCK) 
				INNER JOIN CBDB_STAGE.CTL.APPRAISAL APP WITH(NOLOCK)
						ON AC.COLLATERAL_REF_ID = APP.COLLATERAL_ID AND APP.ID = (SELECT MAX(ID) FROM CBDB_STAGE.CTL.APPRAISAL WITH(NOLOCK) WHERE COLLATERAL_ID = AC.COLLATERAL_REF_ID)
				LEFT JOIN @PLIST NP_REP 
					ON APP.REPA_STATUS = NP_REP.CODE AND NP_REP.CATEGORY = 'REPA_STATUS'
				LEFT JOIN CBDB_STAGE.CTL.COLLATERAL COLL WITH(NOLOCK)
					ON COLL.COLLATERAL_ID = APP.COLLATERAL_ID
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE AC.ID >= @ID_CONTROL AND AC.ID < @ID_CONTROL + @BATCH_SIZE	AND APP.HEADER_ID = @SRC_HEADER_ID--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.APPRAISAL[END]**************************/

/*************************LMS.ACCOUNT_CO_MAKER[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_CO_MAKER'
	SET @REPORT_TABLE_NAME = 'LMS.ACCOUNT_CO_MAKER'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.ACCOUNT_CO_MAKER WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.ACCOUNT_CO_MAKER WITH(TABLOCK) (HEADER_ID  ,ACCOUNT_NO    ,MEMBER_NO     ,BILL_ALLOWED     ,STATUS     ,BILL_TRANSFER_DATE	,FULL_NAME																							   ,LAST_NAME    ,FIRST_NAME    ,MIDDLE_NAME    ,EXTN_NAME	  ,CORP_CODE    ,CORP_NAME)
				SELECT														 @HEADER_ID ,ACM.ACCOUNT_NO,ACM.CIF_NO ,ACM.BILL_ALLOWED ,ACM.STATUS ,ACM.BILL_TRANSFER_DATE,CL.LAST_NAME + IIF(LEN(CL.FIRST_NAME) > 0,', ',NULL) + CL.FIRST_NAME + ' ' + ISNULL(CL.MIDDLE_NAME,''),CL.LAST_NAME ,CL.FIRST_NAME ,CL.MIDDLE_NAME ,CL.SUFFIX_NAME ,CL.CORP_CODE ,CCM.CORPORATE_DESC
				FROM CBDB_STAGE.LMS.ACCOUNT_CO_MAKER ACM WITH(NOLOCK)
					LEFT JOIN CBDB_STAGE.MMS.CLIENT CL
						ON	ACM.CIF_NO = CL.CIF_NO
					LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE_MEMBER CCM WITH(NOLOCK)
						ON CL.CORP_CODE = CCM.CORPORATE_CODE
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ACM.ID >= @ID_CONTROL AND ACM.ID < @ID_CONTROL + @BATCH_SIZE AND ACM.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.ACCOUNT_CO_MAKER[END]**************************/

/*************************LMS.REMITTANCE[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'BULK_ITEMS'
	SET @REPORT_TABLE_NAME = 'LMS.REMITTANCE'
	SET @SRC_SCHEMA_NAME = 'CMN'
	SET @SRC_MODULE_CODE = 'COR'
	SET @IS_DUMP = 0 --AUTO DELTA TABLE
	
	--SPECIAL CASE RETRIEVAL OF HEADER_ID
	SELECT @SRC_HEADER_ID = ID,@SRC_MODULE_CODE = MODULE_CODE,@BIZ_DATE = BUSINESS_DATE FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) 
	WHERE ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = @SRC_MODULE_CODE);

	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.CMN.BULK_ITEMS WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @SRC_HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		--SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @SRC_HEADER_ID AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		----IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		--IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		--BEGIN
		--	EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		--END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.REMITTANCE WITH(TABLOCK) 
						(HEADER_ID,ACCOUNT_NO   ,COMP_CODE        ,COMP_NAME          ,REMITTANCE_TYPE   ,AMOUNT   ,DATE       ,OR_NO                                             ,UNPOSTED_REASON																						 ,PAYROLL_DATE                                        ,REMITTANCE_TYPE_DESC ,PRODUCT_CATEGORY    ,SEQUENCE_NO        ,STATUS    ,BILLING_GROUP_CODE)
				SELECT  @HEADER_ID,BI.ACCOUNT_NO,BC.CORPORATE_CODE,CORP.CORPORATE_DESC,BC.REMITTANCE_TYPE,BI.AMOUNT,BI.BIZ_DATE,ISNULL(AKNOWLEDGE_REF_NO,BC.REFERENCE_NO) AS OR_NO,IIF(BI.STATUS = 3,BI.REMARK,IIF(BI.STATUS = 2 AND BIC.STATUS <> 1, BIC.REMARK, NULL)) AS UNPOSTED_REASON,BC.PAYROLL_DATE /**TRAN REMARK IN CHILD IF FAILED**/,PL.DESCRIPTION       ,CDC.PRODUCT_CATEGORY ,BI.SEQUENCE_NO  ,BI.STATUS ,BC.BILLING_GROUP_CODE
				FROM CBDB_STAGE.CMN.BULK_CONTROL BC WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.CMN.BULK_ITEMS BI WITH(NOLOCK)
					ON BC.BATCH_ID = BI.BATCH_ID
				LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE_MEMBER CORP WITH(NOLOCK)
					ON CORP.CORPORATE_CODE = BC.CORPORATE_CODE
				LEFT JOIN @PLIST PL 
					ON BC.REMITTANCE_TYPE = PL.CODE AND PL.CATEGORY = 'REMITTANCE_TYPE'
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_INFO AI WITH(NOLOCK)
					ON BI.ACCOUNT_NO = AI.ACCOUNT_NO
				LEFT JOIN CBDB_STAGE.CMn.CFG_DEDUCTION_CODE CDC WITH(NOLOCK)
					ON  RIGHT(AI.LOAN_PRODUCT_CODE,3) = CDC.PRODUCT_CODE
					AND BC.CORPORATE_CODE = CDC.CORPORATE_CODE
					AND BC.BILLING_GROUP_CODE = CDC.BILLING_GROUP_CODE
				LEFT JOIN CBDB_STAGE.CMN.BULK_ITEM_CHILD BIC WITH(NOLOCK)
					ON BI.ID = BIC.BULK_ITEM_ID
				WHERE BC.BULK_UPLOAD_TYPE =3 --Remittance File Upload Child
				  AND BC.STATUS = 2 --SUCCESSFUL Upload
				  AND BC.BIZ_DATE = @BIZ_DATE
			--->END OF INSERT INTO SELECT STATEMENT		
			--AND BI.ID >= @ID_CONTROL AND BI.ID < @ID_CONTROL + @BATCH_SIZE	AND BI.HEADER_ID = @SRC_HEADER_ID--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
				BREAK;
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			SET @SCHEMA_NAME = 'LMS'
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			SET @SCHEMA_NAME = 'LMS'
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''		
	END
	SET @SCHEMA_NAME = 'LMS'
END
/*************************LMS.REMITTANCE[END]**************************/

/*************************LMS.AUTODEBIT_HISTORY[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_AUTODEBIT'
	SET @REPORT_TABLE_NAME = 'LMS.AUTODEBIT_HISTORY'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.ACCOUNT_AUTODEBIT WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY	
			SET @ROWS_INSERTED = 0
			--SELECT @ROWS_INSERTED = 0,			
			--	   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			--WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.AUTODEBIT_HISTORY WITH(TABLOCK) 
						(HEADER_ID ,ACCOUNT_NO     ,ACCOUNT_NAME     ,MEMBER_NO  ,PRODUCT_SHORT_NAME      ,TRAN_DATE	    ,PRINCIPAL_PAID			         ,INTEREST_PAID                  ,SD_CREDIT        ,PENALTY                   ,SOURCE_ACCOUNT      ,PARENT_TRAN_CODE    ,COMP_CODE   ,INTEREST_TRAN_CODE           ,SD_TRAN_CODE           ,PENALTY_TRAN_CODE           ,TRAN_TYPE                                                                            ,HANDLING_FEE)
				--SELECT  @HEADER_ID ,LAI.ACCOUNT_NO ,LAI.ACCOUNT_NAME ,LAI.CIF_NO ,PROD.PRODUCT_SHORT_NAME ,ADB.DEBITED_DATE ,LITM.INSTALLMENT_PRINCIPAL_PAID ,LITM.INSTALLMENT_INTEREST_PAID ,ADB.DEBIT_AMOUNT ,LITM.INSTALLMENT_LPC_PAID ,ADB.CASA_ACCOUNT_NO ,2628 AS 'TRAN_CODE',CL.CORP_CODE, NULL AS 'INTEREST_TRAN_CODE', NULL AS 'SD_TRAN_CODE', NULL AS 'PENALTY_TRAN_CODE', (SELECT TRAN_TYPE FROM CBDB_STAGE.CMN.TRAN_ITEM WHERE TRAN_CODE = 2628) AS'TRAN_TYPE',0 AS 'HANDLING_FEE'
				--FROM CBDB_STAGE.LMS.ACCOUNT_AUTODEBIT ADB WITH(NOLOCK)
				--LEFT JOIN CBDB_STAGE.LMS.AMORTIZATION_INFO LINF WITH(NOLOCK)
				--	ON	ADB.AMORTIZATION_INFO_ID = LINF.AMORTIZATION_INFO_ID
				--LEFT JOIN CBDB_STAGE.LMS.AMORTIZATION_ITEM LITM WITH(NOLOCK)
				--	ON LINF.AMORTIZATION_INFO_ID = LITM.AMORTIZATION_INFO_ID
				--LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_INFO LAI WITH(NOLOCK)
				--	ON LINF.ACCOUNT_NO = LAI.ACCOUNT_NO
				--LEFT JOIN CBDB_STAGE.LMS.PRODUCT PROD WITH(NOLOCK)
				--	ON LAI.LOAN_PRODUCT_CODE = PROD.LOAN_PRODUCT_CODE
				--LEFT JOIN CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK)
				--	ON LAI.CIF_NO = CL.CIF_NO
				--WHERE ADB.HEADER_ID = @HEADER_ID AND ADB.DEBIT_FLAG = 1 --SUCCESSFUL
				--UNION ALL
				
				SELECT @HEADER_ID, AI.ACCOUNT_NO,AI.ACCOUNT_NAME,AI.CIF_NO,PROD.PRODUCT_SHORT_NAME, ABH.TRAN_DATE AS 'DEBIT_DATE', SUM(ABH.AMOUNT) AS 'PRINCIPAL',ITR.AMOUNT AS 'INTEREST',ABH.TOTAL_PAYMENT AS 'DEBIT_AMOUNT',PEN.AMOUNT AS 'PENALTY',AI.CASA_ACCOUNT_NO,ABH.TRAN_CODE,CL.CORP_CODE,ITR.TRAN_CODE,SD.TRAN_CODE,PEN.TRAN_CODE,ABH.TRAN_TYPE,HF.AMOUNT
				FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY ABH WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_INFO AI WITH(NOLOCK) ON AI.ACCOUNT_NO = ABH.ACCOUNT_NO
				LEFT JOIN CBDB_STAGE.LMS.PRODUCT PROD WITH(NOLOCK) ON AI.LOAN_PRODUCT_CODE = PROD.LOAN_PRODUCT_CODE
				LEFT JOIN CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK) ON AI.CIF_NO = CL.CIF_NO
				LEFT JOIN 
					(SELECT ACCOUNT_NO, SUM(ISNULL(AMOUNT,0)) AS AMOUNT, SEQUENCENO, TRAN_DATE, USER_NAME, MAX(A.TRAN_CODE) TRAN_CODE FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY  A WITH(NOLOCK) 
					INNER JOIN CBDB_REPORTS.CMN.LHC_TRAN_CONFIG B WITH(NOLOCK) ON A.TRAN_CODE = B.TRAN_CODE AND (B.TRAN_NATURE = 1 AND A.TRAN_CODE <> 2832)  GROUP BY ACCOUNT_NO, SEQUENCENO, TRAN_DATE, USER_NAME) ITR
					ON ABH.ACCOUNT_NO = ITR.ACCOUNT_NO AND ABH.SEQUENCENO = ITR.SEQUENCENO
					AND ABH.TRAN_DATE = ITR.TRAN_DATE
					AND ABH.USER_NAME = ITR.USER_NAME
				LEFT JOIN 
					(SELECT ACCOUNT_NO, SUM(ISNULL(AMOUNT,0)) AS AMOUNT, SEQUENCENO, TRAN_DATE, USER_NAME, MAX(A.TRAN_CODE) TRAN_CODE FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY A WITH(NOLOCK)
					INNER JOIN CBDB_REPORTS.CMN.LHC_TRAN_CONFIG B WITH(NOLOCK) ON A.TRAN_CODE = B.TRAN_CODE AND (B.TRAN_NATURE = 3 OR A.TRAN_CODE = 2832) GROUP BY ACCOUNT_NO, SEQUENCENO, TRAN_DATE, USER_NAME) PEN
					ON ABH.ACCOUNT_NO = PEN.ACCOUNT_NO AND ABH.SEQUENCENO = PEN.SEQUENCENO
					AND ABH.TRAN_DATE = PEN.TRAN_DATE
					AND ABH.USER_NAME = PEN.USER_NAME
				LEFT JOIN 
					(SELECT ACCOUNT_NO, SUM(ISNULL(AMOUNT,0)) AS AMOUNT, SEQUENCENO, TRAN_DATE, USER_NAME, MAX(A.TRAN_CODE) TRAN_CODE FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY  A WITH(NOLOCK)
					INNER JOIN CBDB_REPORTS.CMN.LHC_TRAN_CONFIG B WITH(NOLOCK) ON A.TRAN_CODE = B.TRAN_CODE AND B.TRAN_NATURE = 4 GROUP BY ACCOUNT_NO, SEQUENCENO, TRAN_DATE, USER_NAME) SD
					ON ABH.ACCOUNT_NO = SD.ACCOUNT_NO AND ABH.SEQUENCENO = SD.SEQUENCENO
					AND ABH.TRAN_DATE = SD.TRAN_DATE
					AND ABH.USER_NAME = SD.USER_NAME
				LEFT JOIN 
					(SELECT ACCOUNT_NO, SUM(ISNULL(AMOUNT,0)) AS AMOUNT, SEQUENCENO, TRAN_DATE, USER_NAME, MAX(A.TRAN_CODE) TRAN_CODE FROM CBDB_STAGE.LMS.ACCOUNT_BALANCE_HISTORY  A WITH(NOLOCK)
					INNER JOIN CBDB_REPORTS.CMN.LHC_TRAN_CONFIG B WITH(NOLOCK) ON A.TRAN_CODE = B.TRAN_CODE AND B.TRAN_NATURE = 9 GROUP BY ACCOUNT_NO, SEQUENCENO, TRAN_DATE, USER_NAME) HF
					ON ABH.ACCOUNT_NO = HF.ACCOUNT_NO AND ABH.SEQUENCENO = HF.SEQUENCENO
					AND ABH.TRAN_DATE = HF.TRAN_DATE
					AND ABH.USER_NAME = HF.USER_NAME
				WHERE ABH.TRAN_CODE IN (2628,2623)--RECOVERY/AUTODEBIT TRAN CODE
				--HANDLE DUMPING
				AND (
						(@IS_DUMP <> 1 AND ABH.TRAN_DATE = @BIZ_DATE ) --DELTA
						OR 
						( @IS_DUMP = 1 AND ABH.TRAN_DATE <= @BIZ_DATE) --DUMP
					)
					--			AND (
					--	(@IS_DUMP <> 1 AND ABH.TRAN_DATE = '2020-05-31' ) --DELTA
					--	OR 
					--	( @IS_DUMP = 1 AND ABH.TRAN_DATE <= '2020-05-31') --DUMP
					--)
				GROUP BY AI.ACCOUNT_NO,AI.ACCOUNT_NAME,AI.CIF_NO,PROD.PRODUCT_SHORT_NAME, ABH.TRAN_DATE,ABH.SEQUENCENO,ITR.AMOUNT,ABH.TOTAL_PAYMENT,PEN.AMOUNT,AI.CASA_ACCOUNT_NO,ABH.TRAN_CODE,CL.CORP_CODE,ITR.TRAN_CODE,SD.TRAN_CODE,PEN.TRAN_CODE,ABH.TRAN_TYPE,HF.AMOUNT
			--->END OF INSERT INTO SELECT STATEMENT		
				--WHERE ADB.ID >= @ID_CONTROL AND ADB.ID < @ID_CONTROL + @BATCH_SIZE AND ADB.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				--SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.AUTODEBIT_HISTORY[END]**************************/

/*************************LMS.NA_APPLICATION_COMPUTATION[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'NA_APPLICATION_COMPUTATION'
	SET @REPORT_TABLE_NAME = 'LMS.NA_APPLICATION_COMPUTATION'
	SET @SRC_SCHEMA_NAME = 'BDS'
	SET @SRC_MODULE_CODE = 'BDS'

	--SPECIAL CASE RETRIEVAL OF HEADER_ID
	SELECT @SRC_HEADER_ID = ID,@SRC_MODULE_CODE = MODULE_CODE,@BIZ_DATE = BUSINESS_DATE FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) 
	WHERE ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = @SRC_MODULE_CODE);

	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.BDS.NA_APPLICATION_COMPUTATION WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @SRC_HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @SRC_HEADER_ID AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC),0)

		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.NA_APPLICATION_COMPUTATION WITH(TABLOCK) 
						(HEADER_ID,REFNO, LOAN_PRODUCT_CODE, LOAN_AMOUNT, LOAN_TERM    , LOAN_MA, LOAN_CTP, LOAN_SBL, LOAN_AVAILABLE_SBL, LOAN_LOANABLE_AMOUNT,LOAN_NET_PROCEED, START_TIME, END_TIME, LOAN_STATUS, LAST_UPDATED_BY,     LAST_UPDATED_DATE, RELEASE_BY,     LIT_NO,     CREATE_BY, OVERALL_MONTHLY_INC, TOTAL_DEDUCTION, NET_TAKE_HOME_PAY)
				SELECT  @HEADER_ID,REFNO, LOAN_PRODUCT_NAME, LOAN_AMOUNT, NAC.LOAN_TERM, LOAN_MA, LOAN_CTP, LOAN_SBL, LOAN_AVAILABLE_SBL, LOAN_LOANABLE_AMOUNT,LOAN_NET_PROCEED, START_TIME, END_TIME, LOAN_STATUS, NAC.LAST_UPDATED_BY, NAC.LAST_UPDATED_DATE, RELEASE_BY, NAC.LIT_NO, CREATE_BY
				--OVERALL GROSS (BASIC PAY + ALLOWANCES + BONUS + OTHER INCOME)
				,(ISNULL(PAYR.BASIC_SALARY,0) + ISNULL(PAYR.ALLOWANCES,0) + ISNULL(PAYR.BONUSES,0) + ISNULL((SELECT SUM(OTHER_INCOME_AMOUNT) FROM CBDB_STAGE.MMS.PAYROLL_OTHER_INCOME WHERE CIF_NO = AI.CIF_NO),0)) AS 'OVERALL_GROSS_INC'
				--TOTAL_DEDUCTION (DEDUCTION + MA OF ALL UNCLOSED LOANS OF THAT MEMBER WHOSE MODE PF PAYMENT IS SALARY DEDUCTION (EXCEPT YUNG CURRENT TORI LOAN RECORD ))
				,PAYR.DEDUCTION_AMOUNT + ISNULL(OTHER_LOAN.TOTAL_AMORT,0) AS 'TOTAL_DEDUCTION'
				--OVERALL_MONTHLY_INC -TOTAL_DEDUCTION
				,(ISNULL(PAYR.BASIC_SALARY,0) + ISNULL(PAYR.ALLOWANCES,0) + ISNULL(PAYR.BONUSES,0) + ISNULL((SELECT SUM(OTHER_INCOME_AMOUNT) FROM CBDB_STAGE.MMS.PAYROLL_OTHER_INCOME WHERE CIF_NO = AI.CIF_NO),0))
					- (ISNULL(PAYR.DEDUCTION_AMOUNT + ISNULL(OTHER_LOAN.TOTAL_AMORT,0),0)) AS 'NET_TAKE_HOME_PAY'
				FROM CBDB_STAGE.BDS.NA_APPLICATION_COMPUTATION NAC WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_INFO AI WITH(NOLOCK)
					ON NAC.LIT_NO = AI.LIT_NO AND NAC.REFNO = AI.APPLICATION_REF_NO
				LEFT JOIN CBDB_STAGE.MMS.PAYROLL PAYR WITH(NOLOCK)
					ON AI.CIF_NO = PAYR.CIF_NO AND PAYR.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.PAYROLL WHERE CIF_NO = AI.CIF_NO)
				LEFT JOIN 
				(
					SELECT A.ACCOUNT_NO,SUM(C.INSTALLMENT_AMOUNT) TOTAL_AMORT FROM CBDB_STAGE.LMS.ACCOUNT_INFO A
					LEFT JOIN CBDB_STAGE.LMS.ACCOUNT_INFO B
						ON A.CIF_NO = B.CIF_NO AND A.ACCOUNT_NO <> B.ACCOUNT_NO AND B.IS_CLOSE = 0 AND B.MODE_OF_PAYMENT_TYPE = 4
					LEFT JOIN CBDB_STAGE.LMS.AMORTIZATION_INFO C
						ON B.ACCOUNT_NO = C.ACCOUNT_NO
					GROUP BY A.ACCOUNT_NO
				) OTHER_LOAN ON AI.ACCOUNT_NO = OTHER_LOAN.ACCOUNT_NO

			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE NAC.ID >= @ID_CONTROL AND NAC.ID < @ID_CONTROL + @BATCH_SIZE	AND NAC.HEADER_ID = @SRC_HEADER_ID--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.NA_APPLICATION_COMPUTATION[END]**************************/

/*************************LMS.AMORTIZATION_INFO[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'AMORTIZATION_INFO'
	SET @REPORT_TABLE_NAME = 'LMS.AMORTIZATION_INFO'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.AMORTIZATION_INFO WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY	
			SET @ROWS_INSERTED = 0
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.AMORTIZATION_INFO WITH(TABLOCK) 
						(HEADER_ID ,ACCOUNT_NO ,AMORTIZATION_INFO_ID ,REPRICING_NO ,STAGE_DISBURSE_NO ,STAGE_DESC ,LOAN_TERM ,INTEREST_RATE ,INSTALLMENT_AMOUNT ,PRINCIPAL_AMOUNT ,INTEREST_AMOUNT ,AMORTIZATION_START_DATE ,AMORTIZATION_END_DATE ,NEXT_DUE_DATE ,NEXT_RVIEW_REPRCNG_NOTIFY_DATE ,REPRICING_NOTIFICATION_FLAG, SCHEDULE_NO_OF_PAYMENT ,LOAN_DISBURSEMENT_DATE ,LOAN_DISBURSEMENT_TYPE ,DISBURSE_CASA_ACCOUNT_NO ,DISBURSE_NET_AMOUNT)
				SELECT  @HEADER_ID ,ACCOUNT_NO ,AMORTIZATION_INFO_ID ,REPRICING_NO ,STAGE_DISBURSE_NO ,STAGE_DESC ,LOAN_TERM ,INTEREST_RATE ,INSTALLMENT_AMOUNT ,PRINCIPAL_AMOUNT ,INTEREST_AMOUNT ,AMORTIZATION_START_DATE ,AMORTIZATION_END_DATE ,NEXT_DUE_DATE ,NEXT_RVIEW_REPRCNG_NOTIFY_DATE ,REPRICING_NOTIFICATION_FLAG, SCHEDULE_NO_OF_PAYMENT ,LOAN_DISBURSEMENT_DATE ,LOAN_DISBURSEMENT_TYPE ,DISBURSE_CASA_ACCOUNT_NO ,DISBURSE_NET_AMOUNT
				FROM CBDB_STAGE.LMS.AMORTIZATION_INFO					
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ID >= @ID_CONTROL AND ID < @ID_CONTROL + @BATCH_SIZE AND HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.AMORTIZATION_INFO[END]**************************/

/*************************LMS.AMORTIZATION_ITEM[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'AMORTIZATION_ITEM'
	SET @REPORT_TABLE_NAME = 'LMS.AMORTIZATION_ITEM'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.LMS.AMORTIZATION_ITEM WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY	
			SET @ROWS_INSERTED = 0
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.LMS.AMORTIZATION_ITEM WITH(TABLOCK) 
						(HEADER_ID ,AMORTIZATION_INFO_ID ,INSTALLMENT_NO ,PRINCIPAL_AMOUNT ,PLAN_INTEREST_BALANCE ,PLAN_PRINCIPAL_BALANCE ,INSTALLMENT_START_DATE ,INSTALLMENT_DUE_DATE ,PAID_FLAG ,INSTALLMENT_OUTSTD_INTEREST ,INSTALLMENT_OUTSTD_PRINCIPAL ,INSTALLMENT_OUTSTD_LPC ,INSTALLMENT_OUTSTD_CHARGE ,INSTALLMENT_OUTSTD_RECURRING_COST ,INSTALLMENT_OUTSTD_AIR ,INSTALLMENT_OUTSTD_INT_CHARGE ,INSTALLMENT_INTEREST_PAID ,INSTALLMENT_PRINCIPAL_PAID ,INSTALLMENT_LPC_PAID ,INSTALLMENT_CHARGE_PAID ,INSTALLMENT_RECURRING_COST_PAID ,INSTALLMENT_AIR_PAID ,INSTALLMENT_INT_CHARGE_PAID)
				SELECT  @HEADER_ID ,AMORTIZATION_INFO_ID ,INSTALLMENT_NO ,PRINCIPAL_AMOUNT ,PLAN_INTEREST_BALANCE ,PLAN_PRINCIPAL_BALANCE ,INSTALLMENT_START_DATE ,INSTALLMENT_DUE_DATE ,PAID_FLAG ,INSTALLMENT_OUTSTD_INTEREST ,INSTALLMENT_OUTSTD_PRINCIPAL ,INSTALLMENT_OUTSTD_LPC ,INSTALLMENT_OUTSTD_CHARGE ,INSTALLMENT_OUTSTD_RECURRING_COST ,INSTALLMENT_OUTSTD_AIR ,INSTALLMENT_OUTSTD_INT_CHARGE ,INSTALLMENT_INTEREST_PAID ,INSTALLMENT_PRINCIPAL_PAID ,INSTALLMENT_LPC_PAID ,INSTALLMENT_CHARGE_PAID ,INSTALLMENT_RECURRING_COST_PAID ,INSTALLMENT_AIR_PAID ,INSTALLMENT_INT_CHARGE_PAID
				FROM CBDB_STAGE.LMS.AMORTIZATION_ITEM					
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ID >= @ID_CONTROL AND ID < @ID_CONTROL + @BATCH_SIZE AND HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************LMS.AMORTIZATION_ITEM[END]**************************/

/*************************TRIGGER OF MIGRATION SP[START]**************************/
DECLARE @IS_FIRST_RUN BIT = (SELECT TOP 1 VARIABLE_VALUE FROM CBDB_REPORTS.CMN.BUSINESS_VARIABLE WHERE VARIABLE_CODE = 'RPT_FIRST_RUN')

IF @IS_FIRST_RUN = 1
BEGIN
	EXEC CBDB_STAGE.dbo.MIGRATION_DEF_ACCOUNTS @HEADER_ID = @HEADER_ID, @BUSINESS_DATE = @BIZ_DATE  --TRIGGER MIGRATION SP FOR DEFICIENT ACCOUNTS
END
ELSE
BEGIN
	EXEC CBDB_STAGE.dbo.FILL_DEFICIENT_ACCOUNTS @HEADER_ID = @HEADER_ID, @BUSINESS_DATE = @BIZ_DATE
END


/*************************TRIGGER OF MIGRATION SP[END]**************************/

DECLARE @LMS_HIST_DUMP BIT = (SELECT TOP 1 IS_DUMP FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = 'LMS.ACCT_BAL_HISTORY')
EXEC CBDB_STAGE.dbo.FILL_LMS_HISTORY_CONSOLIDATED @HEADER_ID = @HEADER_ID, @BUSINESS_DATE = @BIZ_DATE, @IS_DUMP = @LMS_HIST_DUMP

/*************************LMS SP LOGGING[END]**************************/
IF @TABLE_COUNT = @TABLE_SUCCEEDED
BEGIN
	SET @DURATION = DATEDIFF(SECOND, (SELECT TOP 1 TIME_STARTED FROM CBDB_REPORTS.RPT.SP_LOG WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE ORDER BY ID DESC), GETDATE())		
	SET @TOTAL_INSERTED_RECORDS = (SELECT TOTAL_DUMP_RECORD + TOTAL_DELTA_RECORD FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER	WHERE ID = @HEADER_ID AND MODULE_CODE = @MODULE_CODE)
	UPDATE CBDB_REPORTS.RPT.SP_LOG
		SET STATUS	   = 4,
			TIME_ENDED = GETDATE(),
			DURATION   = @DURATION,
			INSERTED_RECORDS = @TOTAL_INSERTED_RECORDS
	WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE  AND NAME = @SP_NAME
	PRINT 'STATUS : COMPLETED | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | RECORD COUNT : ' + CAST(@TOTAL_INSERTED_RECORDS AS VARCHAR(MAX)) + ' | TIME ENDED : ' + CAST(GETDATE() AS VARCHAR(MAX)) + ' | DURATION : ' + CONVERT(VARCHAR(50),@DURATION)			       
	PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
END
ELSE
BEGIN
	UPDATE CBDB_REPORTS.RPT.SP_LOG
				SET STATUS = 3
			WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE AND NAME = @SP_NAME
			PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
			PRINT 'STATUS : FAILED     | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | BUSINESS DATE : ' + CAST(@BIZ_DATE AS VARCHAR(MAX)) + ' | PLEASE SEE ERROR DETAILS IN DATA_COPY_DETAIL '
			PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
END
/*************************LMS SP LOGGING[END]**************************/
PRINT '*************************************************************************** ' + @SCHEMA_NAME + ' FINALIZER [END] *********************************************************************************'
END
