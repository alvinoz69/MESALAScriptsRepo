USE [CBDB_STAGE]
GO
DROP PROCEDURE IF EXISTS [dbo].[MMS_FINALIZER]
/****** Object:  StoredProcedure [dbo].[MMS_FINALIZER]    Script Date: 23/10/2019 11:29:14 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[MMS_FINALIZER]
AS
BEGIN

/**********************INITIALIZATION*********************/
DECLARE @HEADER_ID BIGINT, @BIZ_DATE DATE, @IS_TABLE_COMPLETED INT, @ROWS_INSERTED INT;
DECLARE @ID_CONTROL BIGINT, @BATCH_SIZE INT = 100000, @RESULTS BIGINT; --VARIABLES FOR BATCH INSERT
DECLARE @MODULE_CODE VARCHAR(50) = 'CIF'
DECLARE @SCHEMA_NAME VARCHAR(50) = 'MMS'
DECLARE @STAGE_TABLE_NAME VARCHAR(100) = ''
DECLARE @REPORT_TABLE_NAME VARCHAR(100) = ''
DECLARE @IS_DUMP BIT = 0
DECLARE @DETAIL_ID BIGINT = 0
DECLARE @ERR_MSG VARCHAR(MAX) = ''
DECLARE @RESULTS_INSERT BIGINT = 0
DECLARE @RESULTS_UPDATE BIGINT = 0	
DECLARE @SP_NAME VARCHAR(50) = 'MMS_FINALIZER'
DECLARE @TABLE_COUNT INT = 0			   --FOR SP LOG
DECLARE @TABLE_SUCCEEDED INT = 0		   --FOR SP LOG
DECLARE @TOTAL_INSERTED_RECORDS BIGINT = 0 --FOR SP LOG
DECLARE @DURATION INT = 0

SET NOCOUNT ON;  --OPTIMIZATION
SELECT @HEADER_ID = ID,@MODULE_CODE = MODULE_CODE,@BIZ_DATE = BUSINESS_DATE FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) 
WHERE ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = @MODULE_CODE);

SET @TABLE_COUNT = ISNULL((SELECT COUNT(TABLE_NAME) FROM CBDB_REPORTS.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = @SCHEMA_NAME),0) - 1 --exclude MMS.INFORMATION_MAINT

--INTERNAL PICKLIST
DECLARE @PLIST TABLE(CATEGORY VARCHAR(60),CODE VARCHAR(30),[DESCRIPTION] VARCHAR(80))
INSERT INTO @PLIST(CATEGORY, CODE, DESCRIPTION) VALUES ('OTHER_BANK_ACCT_STAT','0', 'INACTIVE'),('OTHER_BANK_ACCT_STAT','1', 'ACTIVE') --OTHER BANK ACCOUNT STATUS
/*********************************************************/

--CHECK IF HEADER IS NULL THEN BREAK
IF @HEADER_ID IS NULL BEGIN
PRINT '**************************************************************'
PRINT 'SOMETHING WENT WRONG. UNABLE TO GET HEADER_ID OF MODULE : ' + @MODULE_CODE RETURN; END

--CHECK IF PROCESS IS DONE ALREADY, IF SO, THEN BREAK THE PROCESSS
IF EXISTS(SELECT 1 FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(NOLOCK) WHERE BUSINESS_DATE = @BIZ_DATE AND [STATUS] = 4 AND MODULE_CODE = @MODULE_CODE) BEGIN PRINT 'PROCESS SKIPPED. ' + @MODULE_CODE + ' DATA ALREADY EXISTS.' RETURN; END

/*************************CMN.DATA_COPY_HEADER[START]*************************/
PRINT CHAR(13) + '*************************************************************************** ' + @SCHEMA_NAME + ' FINALIZER *********************************************************************************'
IF NOT EXISTS (SELECT 1 FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(NOLOCK) WHERE BUSINESS_DATE = @BIZ_DATE AND MODULE_CODE = @MODULE_CODE)
BEGIN
	BEGIN TRAN
		SET IDENTITY_INSERT CBDB_REPORTS.CMN.DATA_COPY_HEADER ON
		
		INSERT INTO CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(TABLOCK) (ID, MODULE_CODE, BUSINESS_DATE, TOTAL_DUMP_RECORD, TOTAL_DELTA_RECORD,TIME_STARTED,[STATUS]) 
			   VALUES (@HEADER_ID, @MODULE_CODE, @BIZ_DATE, 0,0,GETDATE(),1);
		SET IDENTITY_INSERT CBDB_REPORTS.CMN.DATA_COPY_HEADER OFF
	COMMIT TRAN
	INSERT INTO CBDB_REPORTS.RPT.SP_LOG (HEADER_ID  ,NAME	  ,BUSINESS_DATE  ,TIME_STARTED ,STATUS)
								VALUES		(@HEADER_ID ,@SP_NAME ,@BIZ_DATE ,GETDATE()    ,1)
		PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
		PRINT 'STATUS : STARTED   | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | TIME STARTED : ' + CAST(GETDATE() AS VARCHAR(MAX)) + ' | BUSINESS DATE : ' + CAST(@BIZ_DATE AS VARCHAR(MAX))	
END
/*************************CMN.DATA_COPY_HEADER[END]**************************/

/*************************MMS.CLIENT[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'CLIENT'
	SET @REPORT_TABLE_NAME = 'MMS.CLIENT'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CLIENT WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.CLIENT WITH(TABLOCK)(HEADER_ID	,MEMBER_NO,OLD_CIF_NO  ,APPL_REF_NO         ,APPLICATION_DATE  ,APPL_USER_ID,FULL_NAME																				                                                      ,FIRST_NAME  ,MIDDLE_NAME	 ,LAST_NAME  ,EXTN_NAME	   ,MEMBER_TYPE		                       ,CUSTOMER_TYPE				        ,MEMBER_CLASS	                              ,MEMBERSHIP_DATE,MAN_NO         ,C.STATUS					                                  ,CORP_CODE  ,CORP_NAME		                     ,PREV_CORP_CODE   ,BILLING_GROUP		                               ,DIVISION		                    ,GENDER				               ,BIRTHDATE		 ,CIVIL_STATUS	                             ,SPS_BIRTHDATE														   ,SPS_DBP									               ,SPS_FNAME													    ,SPS_MNAME														   ,SPS_LNAME    ,PREF_ADDRESS												,PREF_EMAIL_ADD							   ,PREF_LANDLINE											    ,PREF_MOBILE												 ,WITH_DBP								   ,DBP_ENROLL_DATE		   ,DBP_END_DATE	,WITH_DOLE_OUT	 ,DOLE_OUT_ENROLL_DATE			  ,DOLE_OUT_END_DATE		,HOLD_DATE							 ,HOLD_REASON_CODE												,HOLD_REASON_DESC													                            ,HOLD_USER_ID                                                       ,LAST_STAT_CHANGE_DATE,REASON_STAT_CHANGE					                              ,TERMINATION_DATE  ,LAST_UPDATED_DATE  ,PEP							  ,RTS	  ,BOT_RESO_NO		  ,BOT_CONF_DATE		  ,WITH_ADDRESS								    ,WITH_MOBILE									,WITH_LANDLINE											 ,WITH_EMAIL					                  ,WITH_SOCIAL_MEDIA								     ,RISK_CLASS				     ,GARNISH                         ,GARNISH_START_DATE ,GARNISH_END_DATE,COSIGNEE_NAME																						                             ,GARNISH_COVERAGE ,GARNISH_COVERAGE_VALUE,SPA	   ,SPA_START_DATE,SPA_END_DATE,SPA_COVERAGE,SPA_COVERAGE_VALUE,SPA_ATTORNEY																						  ,TORI_TAG  ,TORI_TAG_LAST_UPDATED_DATE  ,PREV_CORP_NAME ,IS_TERMINATED                         ,DBP_REMARKS																																																																																																																																				,DBP_SPS_REMARKS																																																																																																																																																																										        ,BILLING_GROUP_CODE  ,CLIENT_STATUS_CODE  ,MEMBER_TYPE_CODE,GROUP_CODE		,GROUP_CODE_DESC    ,GARNISH_COVERAGE_DESC                   ,SPA_COVERAGE_DESC                      ,SPS_DBP_ENROLL_DATE                  ,SPS_DBP_END_DATE,DIVISION_CODE,CORP_TRANSFER_REASON,MEMBER_CLASS_CODE    ,DBP_CONTRIBUTION, RISK_CATEGORY_CODE, RISK_CATEGORY_DESC		,DESIGNATION, STAFF       ,IS_HIGH_RISK                                         ,IS_EX_MEMBER											,ADDL_ENROLLEE_BIRTHDATE						 ,ADDL_ENROLLEE_FNAME								   ,ADDL_ENROLLEE_MNAME									  ,ADDL_ENROLLEE_LNAME								   ,ADDL_ENROLLEE_REL_TYPE_CODE							  ,ADDL_ENROLLEE_REL_TYPE_DESC)
					   SELECT						     		 @HEADER_ID,C.CIF_NO ,C.OLD_CIF_NO,C.APPLICATION_REF_NO,C.APPLICATION_DATE,C.OPEN_BY	,(CASE WHEN C.CLIENT_NAME IS NULL THEN C.LAST_NAME + ', ' + C.FIRST_NAME + ' ' + ISNULL(C.MIDDLE_NAME,'') ELSE C.CLIENT_NAME END) AS FULL_NAME,C.FIRST_NAME,C.MIDDLE_NAME,C.LAST_NAME,C.SUFFIX_NAME,ISNULL(NP_MT.DESCRIPTION,C.CLIENT_TYPE),C.CLIENT_SUB_TYPE AS 'CUSTOMER_TYPE',ISNULL(CCC.DESCRIPTION,C.CLASSIFICATION_CODE),C.DATE_OPEN    ,C.SERIAL_NUMBER,ISNULL(CSTAT.CLIENT_STATUS_TYPE_NAME,C.CLIENT_STATUS_CODE) ,C.CORP_CODE,ISNULL(CCM.CORPORATE_DESC,C.CORP_CODE),C.PREV_CORP_CODE ,ISNULL(BG.BILLING_GROUP_DESC,C.BILLING_GROUP_CODE) ,ISNULL(DV.DIVISION_DESC,C.BRU_CODE) ,ISNULL(CP_GDR.DESCRIPTION,C.SEX)  ,C.BIRTH_CORP_DATE,ISNULL(CP_CVL.DESCRIPTION,C.MARITAL_STATUS),IIF(SPS.BIRTH_DATE IS NOT NULL,SPS.BIRTH_DATE, NULL) 'SPS_BIRTH_DATE',IIF(DBP.DBP_ADDL_RELATIONSHIP = '001',1,0) AS 'SPS_DBP',IIF(SPS.FIRST_NAME IS NOT NULL,SPS.FIRST_NAME, NULL) 'SPS_FNAME',IIF(SPS.MIDDLE_NAME IS NOT NULL,SPS.MIDDLE_NAME, NULL) 'SPS_MNAME',IIF(SPS.LAST_NAME IS NOT NULL,SPS.LAST_NAME, NULL) 'SPS_LNAME',
					   ((CASE WHEN ADR.ADDRESS1 IS NULL AND ADR.DISTRICT IS NULL THEN NULL WHEN ADR.ADDRESS1 IS NULL THEN ADR.DISTRICT WHEN ADR.DISTRICT IS NULL THEN ADR.ADDRESS1 ELSE ADR.ADDRESS1 + ', ' + ADR.DISTRICT END) + ' ' + (CASE WHEN ADR.TOWN IS NULL AND ADR.CITY IS NULL AND ADR.STATE IS NULL THEN NULL WHEN ADR.TOWN IS NULL AND ADR.CITY IS NULL AND ADR.STATE IS NOT NULL THEN ADR.STATE WHEN ADR.TOWN IS NOT NULL AND ADR.CITY IS NULL AND ADR.STATE IS NULL THEN ADR.TOWN WHEN ADR.TOWN IS NULL AND ADR.CITY IS NOT NULL AND ADR.STATE IS NULL THEN ADR.CITY WHEN ADR.TOWN IS NOT NULL AND ADR.CITY IS NOT NULL AND ADR.STATE IS NULL THEN ADR.TOWN + ' ' + ADR.CITY WHEN ADR.TOWN IS NOT NULL AND ADR.CITY IS NULL AND ADR.STATE IS NOT NULL THEN ADR.TOWN + ', ' + ADR.STATE WHEN ADR.TOWN IS NULL AND ADR.CITY IS NOT NULL AND ADR.STATE IS NOT NULL THEN ADR.CITY + ', ' + ADR.STATE WHEN ADR.TOWN IS NOT NULL AND ADR.CITY IS NOT NULL AND ADR.STATE IS NOT NULL THEN ADR.CITY + ', ' + ADR.STATE END)) AS 'PREF_ADDRESS'																																		,CT_EMAIL.CONTACT_VALUE AS 'PREF_EMAIL_ADD',ADR.LANDLINE_PREFIX + ADR.LANDLINE_NUMBER AS 'PREF_LANDLINE',CT_MOB.MOBILE_PREFIX + CT_MOB.MOBILE_NUMBER AS 'PREF_MOBILE',IIF(DBP.CIF_NO IS NULL,0,1) AS 'WITH_DBP',DBP.DBP_ENROLLMENT_DATE,DBP.DBP_END_DATE,DBP.DBP_DOLE_OUT,DBP.DBP_DOLE_OUT_ENROLLMENT_DATE,DBP.DBP_DOLE_OUT_END_DATE,CSH.LAST_UPDATED_DATE AS 'HOLD_DATE',IIF(CSH.STATUS_TO ='H',CSH.REASON_CODE,NULL) AS 'REASON_CODE',IIF(CSH.STATUS_TO = 'H', ISNULL(NP_HR.DESCRIPTION,CSH.REASON_CODE), NULL) AS 'HOLD_REASON_DESC' ,IIF(CSH.STATUS_TO = 'H',CSH.LAST_UPDATED_BY,NULL) AS 'HOLD_USER_ID',CSH.LAST_UPDATED_DATE,ISNULL(CP_CHG.DESCRIPTION,CSH.REASON_CODE) AS 'REASON_STAT_CHANGE' ,C.TERMINATION_DATE,C.LAST_UPDATED_DATE,IIF(C.RISK_PEP = 1,1,0) AS 'PEP',RTS.RTS,C.BOT_RESOLUTION_NO,C.BOT_CONFIRMATION_DATE,IIF(ADR.CIF_NO IS NULL,0,1) AS 'WITH_ADDRESS',IIF(CT_MOB.CIF_NO IS NULL,0,1) AS 'WITH_MOBILE',IIF(ADR.LANDLINE_NUMBER IS NULL, 0,1) AS 'WITH_LANDLINE',IIF(CT_EMAIL.CIF_NO IS NULL,0,1) AS 'WITH_EMAIL',IIF(CT_SOC.CIF_NO IS NULL,0,1)  AS 'WITH_SOCIAL_MEDIA',RSK.RISK_CODE AS 'RISK_CLASS'  ,IIF(GAR.CIF_NO IS NOT NULL,1,0) ,GAR.START_DATE	  ,GAR.END_DATE    ,GAR_ATT.LAST_NAME + ISNULL(GAR_ATT.FIRST_NAME,', ') + GAR_ATT.FIRST_NAME + ' ' + ISNULL(GAR_ATT.MIDDLE_NAME,'') AS 'GAR_ATTORNEY',GAR.COVERAGE     ,GAR.COVERAGE_VALUE    ,SPA.TAG ,SPA.START_DATE,SPA.END_DATE,SPA.COVERAGE,SPA.COVERAGE_VALUE,SPA_ATT.LAST_NAME + ', ' + SPA_ATT.FIRST_NAME + ' ' + ISNULL(SPA_ATT.MIDDLE_NAME,'') AS 'SPA_ATTORNEY',C.TORI_TAG,C.TORI_TAG_LAST_UPDATED_DATE,CCM_P.CORPORATE_DESC                ,ISNULL(C.TERMINATION_FLAG,0) AS 'IS_TERMINATED' ,(CASE WHEN (DBP.DBP_CONTRIBUTION = 1 AND DBP.DBP_END_DATE IS NULL) OR (DBP.DBP_CONTRIBUTION = 1 AND DBP.DBP_END_DATE > (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)) THEN 'CREATE' WHEN (DBP.DBP_CONTRIBUTION = 0 AND DBP.DBP_END_DATE IS NULL) OR (DBP.DBP_CONTRIBUTION = 0 AND DBP.DBP_END_DATE < (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)) OR (DBP.DBP_CONTRIBUTION = 1 AND DBP.DBP_END_DATE < (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)) THEN 'DELETE' END)  AS 'DBP_REMARKS' ,(CASE WHEN  DBP.DBP_ADDL_RELATIONSHIP = '001' THEN CASE WHEN (SPS_DBP.DBP_CONTRIBUTION = 1 AND DBP.DBP_ADDL_ENROLLEE_END_DATE IS NULL) OR (SPS_DBP.DBP_CONTRIBUTION = 1 AND DBP.DBP_ADDL_ENROLLEE_END_DATE > (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)) THEN 'CREATE' WHEN (SPS_DBP.DBP_CONTRIBUTION = 0 AND DBP.DBP_ADDL_ENROLLEE_END_DATE IS NULL) OR (SPS_DBP.DBP_CONTRIBUTION = 1 AND DBP.DBP_ADDL_ENROLLEE_END_DATE < (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)) OR (SPS_DBP.DBP_CONTRIBUTION = 1 AND DBP.DBP_ADDL_ENROLLEE_END_DATE < (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)) THEN 'DELETE' END ELSE NULL END) AS 'DBP_SPS_REMARKS',C.BILLING_GROUP_CODE,C.CLIENT_STATUS_CODE,C.CLIENT_TYPE  ,CORP_GP.GROUP_CODE,CORP_GP.GROUP_DESC ,ISNULL(NP_GAR.DESCRIPTION,GAR.COVERAGE) ,ISNULL(NP_SPA.DESCRIPTION,SPA.COVERAGE),SPS_DBP.DBP_ADDL_ENROLLEE_ENROLL_DATE,SPS_DBP.DBP_ADDL_ENROLLEE_END_DATE,C.BRU_CODE   ,CORP_TRANSFER_REASON,C.CLASSIFICATION_CODE,DBP.DBP_CONTRIBUTION, RSKC.CATEGORY_CODE, RSKCAT.LABEL	,C.DESIGNATION,C.STAFF ,IIF(HR.CIF_NO IS NULL, 0, 1) 'IS_HIGH_RISK' ,IIF(EXM.VARIABLE_VALUE IS NOT NULL, 1,0) 'IS_EX_MEMBER',DBP.DBP_ADDL_BIRTH_DATE 'ADDL_ENROLLE_BIRTHDATE',DBP.DBP_ADDL_ENROLLEE_FIRST_NAME 'ADDL_ENROLLE_FNAME',DBP.DBP_ADDL_ENROLLEE_MIDDLE_NAME 'ADDL_ENROLLE_MNAME',DBP.DBP_ADDL_ENROLLEE_LAST_NAME 'ADDL_ENROLLE_LNAME',DBP.DBP_ADDL_RELATIONSHIP 'ADDL_ENROLLE_REL_TYPE_CODE',NP_RL.DESCRIPTION 'ADDL_ENROLLE_REL_TYPE_DESC'
						FROM CBDB_STAGE.MMS.CLIENT C WITH(NOLOCK)
						LEFT JOIN CBDB_STAGE.MMS.CFG_BILLING_GROUP BG WITH(NOLOCK)
							ON C.BILLING_GROUP_CODE = BG.BILLING_GROUP_CODE AND C.CORP_CODE = BG.CORPORATE_CODE
						LEFT JOIN CBDB_STAGE.MMS.CONTACT CT_MOB WITH(NOLOCK)
							ON C.CIF_NO = CT_MOB.CIF_NO AND CT_MOB.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CONTACT WHERE CONTACT_TYPE= 'M' AND STATUS = 1 AND CIF_NO = C.CIF_NO)
						LEFT JOIN CBDB_STAGE.MMS.CONTACT CT_EMAIL WITH(NOLOCK)
							ON C.CIF_NO = CT_EMAIL.CIF_NO AND CT_EMAIL.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CONTACT WHERE CONTACT_TYPE= 'E' AND STATUS = 1 AND CIF_NO = C.CIF_NO)
						LEFT JOIN CBDB_STAGE.MMS.CONTACT CT_SOC WITH(NOLOCK)
							ON C.CIF_NO = CT_SOC.CIF_NO AND CT_SOC.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CONTACT WHERE CONTACT_TYPE NOT IN('M','E') AND STATUS = 1 AND CIF_NO = C.CIF_NO)
						LEFT JOIN CBDB_STAGE.MMS.ADDRESS ADR WITH(NOLOCK)
							ON C.ADDRESS_GUID = ADR.ADDRESS_GUID AND ADR.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.ADDRESS WHERE ADDRESS_GUID = C.ADDRESS_GUID AND PREFERRED_ADDRESS = 1 AND STATUS = 1)
						LEFT JOIN CBDB_STAGE.MMS.MEMBER_DBP DBP WITH(NOLOCK)
							ON C.CIF_NO = DBP.CIF_NO
						LEFT JOIN CBDB_STAGE.MMS.CLIENT_STATUS_HISTORY CSH WITH(NOLOCK)
							ON C.CIF_NO = CSH.CIF_NO AND CSH.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CLIENT_STATUS_HISTORY WHERE CIF_NO = C.CIF_NO)
						LEFT JOIN CBDB_STAGE.MMS.CLIENT_RELATION SPS WITH(NOLOCK)
							ON C.CIF_NO = SPS.CIF_NO AND SPS.RELATIONSHIP_CODE = '001' AND SPS.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CLIENT_RELATION WHERE CIF_NO = C.CIF_NO AND RELATIONSHIP_CODE = '001' AND LAST_NAME IS NOT NULL)-- SPOUSE
						LEFT JOIN CBDB_STAGE.MMS.MEMBER_DBP SPS_DBP WITH(NOLOCK) 
							ON C.CIF_NO = SPS_DBP.CIF_NO AND SPS_DBP.DBP_ADDL_RELATIONSHIP = '001'
						LEFT JOIN CBDB_STAGE.MMS.DIVISION DV WITH(NOLOCK)
							ON C.BRU_CODE = DV.BRU_CODE AND DV.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.DIVISION WITH(NOLOCK) WHERE BRU_CODE = C.BRU_CODE)
						LEFT JOIN CBDB_STAGE.MMS.MEMBER_RISK RSK WITH(NOLOCK)
							ON C.CIF_NO = RSK.CIF_NO AND RSK.RISK_CODE = (SELECT MAX(RISK_CODE) FROM CBDB_STAGE.MMS.MEMBER_RISK WHERE CIF_NO = C.CIF_NO)
						LEFT JOIN CBDB_STAGE.MMS.CFG_RISK_CODE RSKC WITH(NOLOCK) ON RSKC.CODE = RSK.RISK_CODE
						LEFT JOIN CBDB_STAGE.MMS.CFG_RISK_CATEGORY RSKCAT WITH(NOLOCK) ON RSKCAT.CODE = RSKC.CATEGORY_CODE
						LEFT JOIN CBDB_STAGE.MMS.MEMBER_SPA_GAR SPA WITH(NOLOCK)
							ON C.CIF_NO = SPA.CIF_NO AND SPA.TYPE = 1 AND SPA.STATUS = 1 AND SPA.TAG = 1 AND (DATEDIFF(DD, SPA.END_DATE, (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY))<1 OR SPA.END_DATE IS NULL)--SPA
						LEFT JOIN CBDB_STAGE.MMS.MEMBER_SPA_GAR GAR WITH(NOLOCK)
							ON C.CIF_NO = GAR.CIF_NO AND GAR.TYPE = 2 AND GAR.STATUS = 1 AND GAR.TAG = 1 AND (DATEDIFF(DD, GAR.END_DATE, (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY))<1 OR GAR.END_DATE IS NULL)--GAR
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_SPA WITH(NOLOCK)
							ON SPA.COVERAGE = NP_SPA.CODE AND SPA.TYPE = 1 AND NP_SPA.CATEGORY = 'SPA_COVERAGE'
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_GAR WITH(NOLOCK)
							ON GAR.COVERAGE = NP_GAR.CODE AND GAR.TYPE = 2 AND NP_GAR.CATEGORY = 'GAR_COVERAGE'
						LEFT JOIN CBDB_STAGE.MMS.MEMBER_SPA_GAR_ATT SPA_ATT WITH(NOLOCK) --SPA ATTORNEY
							ON SPA.MEMBER_SPA_GAR_GUID = SPA_ATT.MEMBER_SPA_GAR_GUID AND SPA_ATT.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.MEMBER_SPA_GAR_ATT WHERE MEMBER_SPA_GAR_GUID = SPA.MEMBER_SPA_GAR_GUID)
						LEFT JOIN CBDB_STAGE.MMS.MEMBER_SPA_GAR_ATT GAR_ATT WITH(NOLOCK) --GARNISH ATTORNEY
							ON GAR.MEMBER_SPA_GAR_GUID = GAR_ATT.MEMBER_SPA_GAR_GUID AND GAR_ATT.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.MEMBER_SPA_GAR_ATT WHERE MEMBER_SPA_GAR_GUID = GAR.MEMBER_SPA_GAR_GUID)
						--LEFT JOIN CBDB_STAGE.MMS.CLIENT_PEP PEP WITH(NOLOCK)
						--	ON C.CIF_NO = PEP.CIF_NO AND PEP.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CLIENT_PEP WHERE CIF_NO = C.CIF_NO)
						LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE_MEMBER CCM WITH(NOLOCK)
							ON C.CORP_CODE = CCM.CORPORATE_CODE
						LEFT JOIN CBDB_STAGE.MMS.CFG_RISK_CATEGORY CRSK WITH(NOLOCK)
							ON C.RISK_CLASS_CODE = CRSK.CODE
						LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP_HR WITH(NOLOCK)
							ON CSH.REASON_CODE = NP_HR.CODE AND NP_HR.CATEGORY IN ('Reason_Hold','CORP_STATUS_REASON')
						LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE_MEMBER CCM_P WITH(NOLOCK)
							ON C.PREV_CORP_CODE = CCM_P.CORPORATE_CODE
						LEFT JOIN 
							(SELECT CL.CIF_NO,CASE WHEN CT.STATUS = 0 OR ADR.STATUS = 0 THEN 1 ELSE 0 END RTS
								FROM CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK)
								LEFT JOIN CBDB_STAGE.MMS.CONTACT CT WITH(NOLOCK)
								ON CL.CIF_NO = CT.CIF_NO AND CT.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.CONTACT WHERE CIF_NO = CL.CIF_NO AND STATUS = 0)
								LEFT JOIN CBDB_STAGE.MMS.ADDRESS ADR
								ON CL.CIF_NO = ADR.CIF_NO AND ADR.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.ADDRESS WHERE CIF_NO = CL.CIF_NO AND STATUS = 0 AND PREFERRED_ADDRESS = 1)) RTS
							ON C.CIF_NO = RTS.CIF_NO
						LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP_MT WITH(NOLOCK)
							ON C.CLIENT_TYPE = NP_MT.CODE AND NP_MT.CATEGORY = 'MembershipType'
						LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE CORP WITH(NOLOCK)
							ON CORP.CORPORATE_CODE = C.CORP_CODE
						LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE_GROUP CORP_GP WITH(NOLOCK)
							ON CORP_GP.GROUP_CODE = CORP.GROUP_CODE
						LEFT JOIN CBDB_STAGE.MMS.CLIENT_STATUS_TYPE CSTAT WITH(NOLOCK)
							ON C.CLIENT_STATUS_CODE = CSTAT.CLIENT_STATUS_TYPE_CODE
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST CP_CHG WITH(NOLOCK)
							ON CSH.REASON_CODE = CP_CHG.CODE AND CP_CHG.CATEGORY IN ('STAT_CHG_REASON','CORP_STATUS_REASON')
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST CP_GDR WITH(NOLOCK)
							ON C.SEX = CP_GDR.CODE AND CP_GDR.CATEGORY = 'GENDER'
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST CP_CVL WITH(NOLOCK)
							ON C.MARITAL_STATUS = CP_CVL.CODE AND CP_CVL.CATEGORY = 'CIVIL_STATUS'
						LEFT JOIN CBDB_STAGE.MMS.CFG_CLIENT_CLASSIFICATION CCC WITH(NOLOCK)
							ON C.CLASSIFICATION_CODE = CCC.CODE
						LEFT JOIN
							(SELECT DISTINCT CIF_NO FROM CBDB_STAGE.MMS.MEMBER_RISK A WITH(NOLOCK)
							 WHERE A.RISK_CODE IN (SELECT CODE FROM CBDB_STAGE.MMS.CFG_RISK_CODE WITH(NOLOCK)
							                       WHERE  CATEGORY_CODE = (SELECT TOP 1 CODE FROM CBDB_STAGE.MMS.CFG_RISK_CATEGORY ORDER BY MAX_POINT DESC))) HR
							ON C.CIF_NO = HR.CIF_NO
						LEFT JOIN CBDB_STAGE.CMN.BUSINESS_VARIABLE EXM WITH(NOLOCK)
							ON C.CLIENT_STATUS_CODE = EXM.VARIABLE_VALUE AND EXM.VARIABLE_CODE = 'RPT_CLEXM_STAT'
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_RL WITH(NOLOCK) 
							ON DBP.DBP_ADDL_RELATIONSHIP = NP_RL.CODE AND NP_RL.CATEGORY = 'RELATIONSHIP'
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE C.ID >= @ID_CONTROL AND C.ID < @ID_CONTROL + @BATCH_SIZE AND C.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR 
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.CLIENT[END]**************************/

/*************************MMS.ADDRESS[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'ADDRESS'
	SET @REPORT_TABLE_NAME = 'MMS.ADDRESS'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.ADDRESS WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END

	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.ADDRESS WITH(TABLOCK) (HEADER_ID, MEMBER_NO ,ADDRESS_TYPE		                          ,ADDRESS1    ,TOWN    ,CITY    ,COUNTRY                             ,LANDLINE                                               , RTS                                                  , INACTIVE                               , PREFFERED)
				SELECT											   @HEADER_ID, ADR.CIF_NO,ISNULL(CP_ATYP.DESCRIPTION,ADR.ADDRESS_TYPE),ADR.ADDRESS1,ADR.TOWN,ADR.CITY,ISNULL(CTY.COUNTRY_NAME,ADR.COUNTRY),ADR.LANDLINE_PREFIX + ADR.LANDLINE_NUMBER AS 'LANDLINE', (CASE WHEN ADR.STATUS = 0 THEN 1 ELSE 0 END) AS 'RTS', IIF(ADR.STATUS = 1, 0, 1) AS 'INACTIVE', ADR.PREFERRED_ADDRESS 
				FROM CBDB_STAGE.MMS.ADDRESS ADR WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST CP_ATYP WITH(NOLOCK)
					ON ADR.ADDRESS_TYPE = CP_ATYP.CODE AND CP_ATYP.CATEGORY = 'ADDRESS_TYPE'
				LEFT JOIN CBDB_STAGE.CMN.CS_COUNTRY CTY WITH(NOLOCK)
					ON ADR.COUNTRY = CTY.COUNTRY_CODE
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE ADR.ID >= @ID_CONTROL AND ADR.ID < @ID_CONTROL + @BATCH_SIZE	AND ADR.HEADER_ID = @HEADER_ID--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.ADDRESS[END]**************************/

/*************************MMS.CLIENT_STATUS_HISTORY[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'CLIENT_STATUS_HISTORY'
	SET @REPORT_TABLE_NAME = 'MMS.CLIENT_STATUS_HISTORY'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CLIENT_STATUS_HISTORY WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.CLIENT_STATUS_HISTORY WITH(TABLOCK) (HEADER_ID, MEMBER_NO ,STATUS_FROM    ,STATUS_FROM_DESC                                        ,STATUS_TO    ,STATUS_TO_DESC                                      ,MAINT_DATE           ,MAINT_BY           ,MAINT_REASON)
				SELECT															 @HEADER_ID, CSH.CIF_NO,CSH.STATUS_FROM,ISNULL(NP_SFROM.CLIENT_STATUS_TYPE_NAME,CSH.STATUS_FROM),CSH.STATUS_TO,ISNULL(NP_STO.CLIENT_STATUS_TYPE_NAME,CSH.STATUS_TO),CSH.LAST_UPDATED_DATE,CSH.LAST_UPDATED_BY,ISNULL(NP_ST.DESCRIPTION,CSH.REASON_CODE)
				FROM CBDB_STAGE.MMS.CLIENT_STATUS_HISTORY CSH WITH(NOLOCK)
					LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_ST WITH(NOLOCK)
						 ON CSH.REASON_CODE = NP_ST.CODE AND NP_ST.CATEGORY IN ('STAT_CHG_REASON','CORP_STATUS_REASON')
					LEFT JOIN CBDB_STAGE.MMS.CLIENT_STATUS_TYPE NP_SFROM WITH(NOLOCK)
						 ON CSH.STATUS_FROM = NP_SFROM.CLIENT_STATUS_TYPE_CODE
					LEFT JOIN CBDB_STAGE.MMS.CLIENT_STATUS_TYPE NP_STO WITH(NOLOCK)
						 ON CSH.STATUS_TO = NP_STO.CLIENT_STATUS_TYPE_CODE
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE CSH.ID >= @ID_CONTROL AND CSH.ID < @ID_CONTROL + @BATCH_SIZE AND CSH.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.CLIENT_STATUS_HISTORY[END]**************************/

/*************************MMS.PEP_INFO[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'CLIENT_PEP'
	SET @REPORT_TABLE_NAME = 'MMS.PEP_INFO'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CLIENT_PEP WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.PEP_INFO WITH(TABLOCK) (HEADER_ID, PRIMARY_MEMBER_NO, NAME_PEP_ASSOC																	 ,POSITION   ,ENTITY   ,RELATIONSHIP)
				SELECT												@HEADER_ID, CIF_NO           , CP.LAST_NAME + ', ' + CP.FIRST_NAME + ' ' + ISNULL(CP.MIDDLE_NAME,'') AS FULL_NAME,CP.POSITION,CP.ENTITY,ISNULL(NP_RL.DESCRIPTION,CP.RELATIONSHIP_CODE)  
					FROM CBDB_STAGE.MMS.CLIENT_PEP CP WITH(NOLOCK)
					LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_RL WITH(NOLOCK)
						ON CP.RELATIONSHIP_CODE = NP_RL.CODE AND CATEGORY = 'OTIN_PEP_REL'
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE CP.ID >= @ID_CONTROL AND CP.ID < @ID_CONTROL + @BATCH_SIZE AND CP.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH 
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.PEP_INFO[END]**************************/

/*************************MMS.PRIM_SEC_XREF[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'CLIENT_RELATION'
	SET @REPORT_TABLE_NAME = 'MMS.PRIM_SEC_XREF'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CLIENT_RELATION WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.PRIM_SEC_XREF WITH(TABLOCK) (HEADER_ID, PRIMARY_MEMBER_NO, SEC_MEMBER_NO)
				SELECT @HEADER_ID, CR.CIF_NO, CR.RELATED_CIF_NO FROM CBDB_STAGE.MMS.CLIENT_RELATION CR WITH(NOLOCK)
					LEFT JOIN CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK)
						ON CR.CIF_NO = CL.CIF_NO
					LEFT JOIN CBDB_STAGE.MMS.CLIENT CL_SEC  WITH(NOLOCK)
						ON CR.CIF_NO = CL_SEC.CIF_NO
					WHERE ISNULL(CR.RELATED_CIF_NO, '') <> '' AND CL.CLIENT_STATUS_CODE <> 'T' AND CL_SEC.CLIENT_STATUS_CODE <> 'T' AND
			--->END OF INSERT INTO SELECT STATEMENT		
					      CL.ID >= @ID_CONTROL AND CL.ID < @ID_CONTROL + @BATCH_SIZE AND CL.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.PRIM_SEC_XREF[END]**************************/

/*************************MMS.RELATIONSHIP[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'CLIENT_RELATION'
	SET @REPORT_TABLE_NAME = 'MMS.RELATIONSHIP'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CLIENT_RELATION WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.RELATIONSHIP  WITH(TABLOCK)(HEADER_ID, PRIMARY_MEMBER_NO, MEMBER_NO, RELATION_TYPE                                , RELATIONSHIP                                  , FNAME        , MNAME         , LNAME       , EXTN_NAME     , BIRTHDATE    , DBP                                  , RELATIONSHIP_TYPE_CODE)
				SELECT													 @HEADER_ID,CR.CIF_NO, CR.RELATED_CIF_NO, ISNULL(NP_RTYPE.DESCRIPTION,CR.RELATION_TYPE), ISNULL(NP_RL.DESCRIPTION,CR.RELATIONSHIP_CODE), CR.FIRST_NAME, CR.MIDDLE_NAME, CR.LAST_NAME, CR.SUFFIX_NAME, CR.BIRTH_DATE, IIF(MD.CIF_NO IS NULL, 0, 1) AS 'DBP', CR.RELATION_TYPE 
				FROM CBDB_STAGE.MMS.CLIENT_RELATION CR WITH(NOLOCK)
					LEFT JOIN CBDB_STAGE.MMS.MEMBER_DBP MD WITH(NOLOCK)
						ON  CR.CIF_NO = MD.CIF_NO
					LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_RL WITH(NOLOCK)
						ON CR.RELATIONSHIP_CODE = NP_RL.CODE AND CATEGORY = 'RELATIONSHIP'
					LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_RTYPE WITH(NOLOCK)
						ON CR.RELATION_TYPE = NP_RTYPE.CODE AND NP_RTYPE.CATEGORY = 'RELATION_TYPE'
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE CR.ID >= @ID_CONTROL AND CR.ID < @ID_CONTROL + @BATCH_SIZE AND CR.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.RELATIONSHIP[END]**************************/

/*************************MMS.CFG_CORP_CONTACT_PERSON[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'CFG_CORPORATE_CONTACT_PERSON'
	SET @REPORT_TABLE_NAME = 'MMS.CFG_CORP_CONTACT_PERSON'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CFG_CORPORATE_CONTACT_PERSON WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.CFG_CORP_CONTACT_PERSON WITH(TABLOCK)(HEADER_ID,CONTACT_PERSON_GUID    ,CORPORATE_CODE    ,FIRST_NAME    ,MIDDLE_NAME    ,LAST_NAME    ,SUFFIX_NAME    ,DESIGNATION    ,DEPARTMENT    ,RELATED_CIF_NO    ,ADDRESS_GUID    ,CONTACT_GUID    ,LANDLINE_PREFIX    ,LANDLINE_NUMBER    ,LANDLINE_EXT    ,LANDLINE_CTY_CODE)
					   SELECT													  @HEADER_ID,CTP.CONTACT_PERSON_GUID,CTP.CORPORATE_CODE,CTP.FIRST_NAME,CTP.MIDDLE_NAME,CTP.LAST_NAME,CTP.SUFFIX_NAME,CTP.DESIGNATION,CTP.DEPARTMENT,CTP.RELATED_CIF_NO,CTP.ADDRESS_GUID,CTP.CONTACT_GUID,ADR.LANDLINE_PREFIX,ADR.LANDLINE_NUMBER,ADR.LANDLINE_EXT,ADR.LANDLINE_CTY_CODE
					   FROM CBDB_STAGE.MMS.CFG_CORPORATE_CONTACT_PERSON CTP
				       LEFT JOIN CBDB_STAGE.MMS.ADDRESS ADR
						ON CTP.ADDRESS_GUID = ADR.ADDRESS_GUID AND ADR.ID = (SELECT MAX(ID) FROM CBDB_STAGE.MMS.ADDRESS WHERE PREFERRED_ADDRESS = 1 AND STATUS = 1 AND ADDRESS_GUID = CTP.ADDRESS_GUID)
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE CTP.ID >= @ID_CONTROL AND CTP.ID < @ID_CONTROL + @BATCH_SIZE AND CTP.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.CFG_CORP_CONTACT_PERSON[END]**************************/

/*************************MMS.CO_TRANSFER_HISTORY[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'BIZ_JOURNAL'
	SET @REPORT_TABLE_NAME = 'MMS.CO_TRANSFER_HISTORY'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.BIZ_JOURNAL WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.CO_TRANSFER_HISTORY WITH(TABLOCK) 
					(HEADER_ID   ,[DATE]          ,LAST_APPROVED_BY                         ,LAST_MAINTAINED_BRANCH                     ,LAST_UPDATED_BY                  ,MEMBER_NO               ,NEW_COMPANY                                                ,PREVIOUS_COMPANY                                                      ,REASON)
				SELECT @HEADER_ID,TRANSACTION_DATE,BZ.OVERRIDE_ID AS 'LAST_APPROVED_BY', BZ.BRANCH_CODE AS 'LAST_MAINTAINED_BRANCH',BZ.USER_NAME AS 'LAST_UPDATED_BY',CL.CIF_NO AS 'MEMBER_NO',ISNULL(NEW_CO.CORPORATE_DESC,CL.CORP_CODE) AS 'NEW_COMPANY',ISNULL(PREV_CO.CORPORATE_DESC,CL.PREV_CORP_CODE) AS 'PREV_CORP',CL.CORP_TRANSFER_REASON 'REASON'
				FROM CBDB_STAGE.MMS.BIZ_JOURNAL BZ WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.MMS.CLIENT CL ON BZ.CIF_NO= CL.CIF_NO
				LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE_MEMBER NEW_CO WITH(NOLOCK) ON NEW_CO.CORPORATE_CODE = CL.CORP_CODE
				LEFT JOIN CBDB_STAGE.MMS.CFG_CORPORATE_MEMBER PREV_CO WITH(NOLOCK) ON PREV_CO.CORPORATE_CODE = CL.PREV_CORP_CODE
				WHERE BZ.TRAN_CODE = 4313 --COMPANY TRANSFER
			--->END OF INSERT INTO SELECT STATEMENT		
				AND BZ.ID >= @ID_CONTROL AND BZ.ID < @ID_CONTROL + @BATCH_SIZE AND BZ.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.CO_TRANSFER_HISTORY[END]**************************/

/*************************MMS.CLIENT_OTHER_INFO[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'CLIENT_OTHR_BANK_ACCOUNT'
	SET @REPORT_TABLE_NAME = 'MMS.CLIENT_OTHER_INFO'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CLIENT_OTHR_BANK_ACCOUNT WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.CLIENT_OTHER_INFO WITH(TABLOCK) 
					  (HEADER_ID ,MEMBER_NO ,BANK_CODE    ,BANK_NAME    ,BANK_SHORT_NAME ,ACCOUNT_NO	 ,ACCOUNT_TYPE	   ,ACCOUNT_NAME	 ,STATUS    ,STATUS_DESC,ACCOUNT_TYPE_DESC)
				SELECT @HEADER_ID,CBA.CIF_NO,CBA.BANK_CODE,TB.BANK_NAME ,TB.BANK_ACRONYM ,CBA.ACCOUNT_NO ,CBA.ACCOUNT_TYPE ,CBA.ACCOUNT_NAME ,CBA.STATUS,OTH_STAT.DESCRIPTION,ACCT_TYPE.DESCRIPTION
				FROM CBDB_STAGE.MMS.CLIENT_OTHR_BANK_ACCOUNT CBA WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.CMN.TRAN_BANKS TB WITH(NOLOCK)
					ON CBA.BANK_CODE = TB.BANK_CODE
				LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST ACCT_TYPE WITH(NOLOCK)
					ON CBA.ACCOUNT_TYPE = ACCT_TYPE.CODE AND ACCT_TYPE.CATEGORY = 'ACCOUNT_TYPE'
				LEFT JOIN @PLIST OTH_STAT ON CBA.STATUS = OTH_STAT.CODE AND OTH_STAT.CATEGORY = 'OTHER_BANK_ACCT_STAT'
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE CBA.ID >= @ID_CONTROL AND CBA.ID < @ID_CONTROL + @BATCH_SIZE	AND CBA.HEADER_ID = @HEADER_ID--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.CLIENT_OTHER_INFO[END]**************************/

/*************************MMS.FAMILY_GROUP[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'CLIENT_RELATION'
	SET @REPORT_TABLE_NAME = 'MMS.FAMILY_GROUP'
	SET @IS_DUMP = 1 --AUTO-DUMP TABLE
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.MMS.CLIENT_RELATION WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END
		--SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.MMS.FAMILY_GROUP WITH(TABLOCK) 
					  (HEADER_ID ,FAMILY_GROUP			 ,COMPANY_NAME     ,PRIMARY_MEMBER_NO     ,PRIMARY_MEMBER_NAME     ,PRIMARY_MEMBER_STATUS ,PRIMARY_MEMBERSHIP_DATE ,SEC_MEMBER_NO			,SEC_MEMBER_NAME		   ,SEC_MEMBER_STATUS			,SEC_MEMBERSHIP_DATE	   ,RELATIONSHIP_TO_PRIMARY)
				SELECT DISTINCT @HEADER_ID,NULL AS 'FAMILY_GROUP' ,CRL.COMPANY_NAME ,CRL.PRIMARY_MEMBER_NO ,CRL.PRIMARY_MEMBER_NAME ,CRL.MEMBERSHIP_STATUS ,CRL.MEMBERSHIP_DATE     ,CRL.SECONDARY_MEMBER_NO ,CRL.SECONDARY_MEMBER_NAME ,CRL.SECONDARY_MEMBER_STATUS ,CRL.SECONDARY_MEMBER_DATE ,CRL.RELATIONSHIP_TO_PRIMARY
				FROM (SELECT CL.CORP_CODE AS 'COMPANY_NAME'
							,CL.CIF_NO	AS 'PRIMARY_MEMBER_NO'
							,ISNULL(NP_CS.DESCRIPTION,CL.CLIENT_STATUS_CODE) AS 'MEMBERSHIP_STATUS'
							,CL.DATE_OPEN AS 'MEMBERSHIP_DATE'
							,CL.LAST_NAME + ', ' + CL.FIRST_NAME + ' ' + ISNULL(CL.MIDDLE_NAME,'') AS 'PRIMARY_MEMBER_NAME'
							,CL_REL.CIF_NO AS 'SECONDARY_MEMBER_NO'
							,CL_REL.DATE_OPEN AS 'SECONDARY_MEMBER_DATE'
							,CL_REL.LAST_NAME + ', ' + CL_REL.FIRST_NAME + ' ' + ISNULL(CL_REL.MIDDLE_NAME,'') AS 'SECONDARY_MEMBER_NAME'
							,ISNULL(NP_CSS.DESCRIPTION,CL_REL.CLIENT_STATUS_CODE) AS 'SECONDARY_MEMBER_STATUS'
							,ISNULL(NP_RL.DESCRIPTION,REL.RELATIONSHIP_CODE) AS 'RELATIONSHIP_TO_PRIMARY'
						FROM CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK)
						LEFT JOIN CBDB_STAGE.MMS.CLIENT_RELATION REL WITH(NOLOCK)
							ON CL.CIF_NO = REL.RELATED_CIF_NO
						LEFT JOIN CBDB_STAGE.MMS.CLIENT CL_REL WITH(NOLOCK)
							ON REL.CIF_NO = CL_REL.CIF_NO
						LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP_CS WITH(NOLOCK)
							ON CL.CLIENT_STATUS_CODE = NP_CS.CODE AND NP_CS.CATEGORY = 'BDS_MEMBERSHIP_STAT'
						LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP_CSS WITH(NOLOCK)
							ON CL_REL.CLIENT_STATUS_CODE = NP_CSS.CODE AND NP_CSS.CATEGORY = 'BDS_MEMBERSHIP_STAT'
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_RL WITH(NOLOCK)
							ON REL.RELATIONSHIP_CODE = NP_RL.CODE AND NP_RL.CATEGORY = 'RELATIONSHIP'
						WHERE ((CL.TERMINATION_FLAG = 0 OR CL.TERMINATION_FLAG IS NULL) AND CL.CLIENT_STATUS_CODE <> 'E')
						  AND REL.RELATION_TYPE = 'E'
						  AND CL.CLIENT_TYPE = 'P'						
						UNION						
						SELECT CL.CORP_CODE AS 'COMPANY_NAME'
							  ,CL.CIF_NO	AS 'PRIMARY_MEMBER_NO'
							  ,ISNULL(NP_CS.DESCRIPTION,CL.CLIENT_STATUS_CODE) AS 'MEMBERSHIP_STATUS'
							  ,CL.DATE_OPEN AS 'MEMBERSHIP_DATE'
							  ,CL.LAST_NAME + ', ' + CL.FIRST_NAME + ' ' + ISNULL(CL.MIDDLE_NAME,'') AS 'PRIMARY_MEMBER_NAME'
							  ,CL_REL.CIF_NO AS 'SECONDARY_MEMBER_NO'
							  ,CL_REL.DATE_OPEN AS 'SECONDARY_MEMBER_DATE'
							  ,CASE WHEN CL_REL.CLIENT_NAME IS NULL THEN REL.LAST_NAME + ',' +  REL.FIRST_NAME + ' ' + ISNULL(REL.MIDDLE_NAME, '') ELSE CL_REL.CLIENT_NAME END AS 'SECONDARY_MEMBER_NAME'
							  ,ISNULL(NP_CSS.DESCRIPTION,CL_REL.CLIENT_STATUS_CODE) AS 'SECONDARY_MEMBER_STATUS'
							  ,ISNULL(NP_RL.DESCRIPTION,REL.RELATIONSHIP_CODE) AS 'RELATIONSHIP_TO_PRIMARY'
						FROM CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK)
						LEFT JOIN CBDB_STAGE.MMS.CLIENT_RELATION REL WITH(NOLOCK)
							ON CL.CIF_NO = REL.CIF_NO
						LEFT JOIN CBDB_STAGE.MMS.CLIENT CL_REL WITH(NOLOCK)
							ON REL.RELATED_CIF_NO = CL_REL.CIF_NO
						LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP_CS WITH(NOLOCK)
							ON CL.CLIENT_STATUS_CODE = NP_CS.CODE AND NP_CS.CATEGORY = 'BDS_MEMBERSHIP_STAT'
						LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP_CSS WITH(NOLOCK)
							ON CL_REL.CLIENT_STATUS_CODE = NP_CSS.CODE AND NP_CSS.CATEGORY = 'BDS_MEMBERSHIP_STAT'
						LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_RL WITH(NOLOCK)
							ON REL.RELATIONSHIP_CODE = NP_RL.CODE AND NP_RL.CATEGORY = 'RELATIONSHIP'
						WHERE ((CL.TERMINATION_FLAG = 0 OR CL.TERMINATION_FLAG IS NULL) AND CL.CLIENT_STATUS_CODE <> 'E')
						  AND CL.CLIENT_TYPE = 'P') AS CRL
			--->END OF INSERT INTO SELECT STATEMENT		
			--	WHERE (CBA.ID >= @ID_CONTROL AND CBA.ID < @ID_CONTROL + @BATCH_SIZE)	--BATCH CONTROL OF THE CURRENT BATCH / BATCH INSERT IS BEING DISABLED
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
				BREAK;
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.FAMILY_GROUP[END]**************************/

/*************************MMS.MEMBER_SPA_GAR[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'MEMBER_SPA_GAR'
	SET @REPORT_TABLE_NAME = 'MMS.MEMBER_SPA_GAR'
	SET @IS_DUMP = 0 --AUTO-DUMP TABLE
	SET @RESULTS_INSERT = 0
	SET @RESULTS_UPDATE = 0	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)

		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--UPDATE EXISTING RECORDS THAT WERE MODIFIED TODAY
				UPDATE MSGR
				SET MSGR.MEMBER_NO = MSG.CIF_NO,
				    MSGR.TYPE = MSG.TYPE, 
					MSGR.TAG = MSG.TAG,
					MSGR.MEMBER_SPA_GAR_GUID = MSG.MEMBER_SPA_GAR_GUID,
					MSGR.START_DATE = MSG.START_DATE,
					MSGR.END_DATE = MSG.END_DATE,
					MSGR.STATUS = MSG.STATUS,
					MSGR.COVERAGE = MSG.COVERAGE,
					MSGR.COVERAGE_VALUE = MSG.COVERAGE_VALUE,
					MSGR.COVERAGE_DESC = ISNULL(NP.DESCRIPTION,MSG.COVERAGE),
					MSGR.LAST_UPDATED_DATE = MSG.LAST_UPDATED_DATE
				FROM  CBDB_REPORTS.MMS.MEMBER_SPA_GAR MSGR WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.MMS.MEMBER_SPA_GAR MSG WITH(NOLOCK)
					ON MSG.MEMBER_SPA_GAR_GUID = MSGR.MEMBER_SPA_GAR_GUID
				LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP WITH(NOLOCK)
					ON MSG.COVERAGE = NP.CODE AND NP.CATEGORY IN (N'BDS_SPA_COVERAGE',N'BDS_GAR_COVERAGE')
				WHERE  MSGR.MEMBER_SPA_GAR_GUID IS NOT NULL --UPDATE EXISTING RECORDS
				--AND    MSGR.LAST_UPDATED_DATE <> MSG.LAST_UPDATED_DATE
				--AND    DATEDIFF(DAY,MSG.LAST_UPDATED_DATE,(SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY WITH(NOLOCK))) = 0
				SET @RESULTS_UPDATE = @@ROWCOUNT							

			--INSERT NO GUID  IN REPORTS
				INSERT INTO CBDB_REPORTS.MMS.MEMBER_SPA_GAR WITH(TABLOCK)
						(HEADER_ID ,MEMBER_NO  ,TYPE     ,TAG     ,MEMBER_SPA_GAR_GUID     ,START_DATE     ,END_DATE     ,STATUS	 ,COVERAGE	   ,COVERAGE_VALUE     ,COVERAGE_DESC													,LAST_UPDATED_DATE)
				SELECT	 @HEADER_ID,MSG.CIF_NO ,MSG.TYPE ,MSG.TAG ,MSG.MEMBER_SPA_GAR_GUID ,MSG.START_DATE ,MSG.END_DATE ,MSG.STATUS ,MSG.COVERAGE ,MSG.COVERAGE_VALUE ,IIF(MSG.TYPE=1,NP_SPA.DESCRIPTION,NP_GAR.DESCRIPTION) AS 'DESC' ,MSG.LAST_UPDATED_DATE
				FROM CBDB_STAGE.MMS.MEMBER_SPA_GAR MSG WITH(NOLOCK)
				LEFT JOIN CBDB_REPORTS.MMS.MEMBER_SPA_GAR MSGR WITH(NOLOCK)
					ON MSG.MEMBER_SPA_GAR_GUID = MSGR.MEMBER_SPA_GAR_GUID
				--LEFT JOIN CBDB_STAGE.CMN.NA_PICKLIST NP WITH(NOLOCK)
				--	ON MSG.COVERAGE = NP.CODE AND NP.CATEGORY IN (N'BDS_SPA_COVERAGE',N'BDS_GAR_COVERAGE')
				LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_SPA WITH(NOLOCK)
							ON MSG.COVERAGE = NP_SPA.CODE AND MSG.TYPE = 1 AND NP_SPA.CATEGORY = 'SPA_COVERAGE'
				LEFT JOIN CBDB_STAGE.MMS.CIF_PICKLIST NP_GAR WITH(NOLOCK)
							ON MSG.COVERAGE = NP_GAR.CODE AND MSG.TYPE = 2 AND NP_GAR.CATEGORY = 'GAR_COVERAGE'
				WHERE  MSGR.MEMBER_SPA_GAR_GUID IS NULL --INSERT NEW RECORDS
				  AND  MSG.TAG = 1
				--AND DATEDIFF(DAY,MSG.LAST_UPDATED_DATE,(SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY WITH(NOLOCK))) = 0
				SET @RESULTS_INSERT = @@ROWCOUNT

				SET @ROWS_INSERTED = @RESULTS_INSERT + @RESULTS_UPDATE		
				BREAK;
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.MEMBER_SPA_GAR[END]**************************/

/*************************MMS.MEMBER_SPA_GAR_ATT[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME  = 'MEMBER_SPA_GAR_ATT'
	SET @REPORT_TABLE_NAME = 'MMS.MEMBER_SPA_GAR_ATT'
	SET @IS_DUMP = 0 --AUTO-DUMP TABLE
	SET @RESULTS_INSERT = 0
	SET @RESULTS_UPDATE = 0	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)

		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT AFTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--UPDATE EXISTING RECORDS THAT WERE MODIFIED TODAY
				UPDATE MSGAR
				SET MSGAR.MEMBER_NO = MSGA.CIF_NO,
					MSGAR.MEMBER_SPA_GAR_GUID = MSGA.MEMBER_SPA_GAR_GUID,
					MSGAR.FIRST_NAME = MSGA.FIRST_NAME,
					MSGAR.MIDDLE_NAME = MSGA.MIDDLE_NAME,
					MSGAR.LAST_NAME = MSGA.LAST_NAME,
					MSGAR.SUFFIX_NAME = MSGA.SUFFIX_NAME,
					MSGAR.LAST_UPDATED_DATE = MSGA.LAST_UPDATED_DATE,
					MSGAR.FULL_NAME = MSGA.LAST_NAME + IIF(LEN(MSGA.FIRST_NAME) > 0,', ',NULL) + MSGA.FIRST_NAME + ' ' + ISNULL(MSGA.MIDDLE_NAME,'')
				FROM  CBDB_REPORTS.MMS.MEMBER_SPA_GAR_ATT MSGAR WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.MMS.MEMBER_SPA_GAR_ATT MSGA WITH(NOLOCK)
					ON MSGA.MEMBER_SPA_GAR_GUID = MSGAR.MEMBER_SPA_GAR_GUID
				WHERE  MSGAR.MEMBER_SPA_GAR_GUID IS NOT NULL --UPDATE EXISTING RECORDS
				--AND    MSGR.LAST_UPDATED_DATE < MSG.LAST_UPDATED_DATE
				--AND    DATEDIFF(DAY,MSG.LAST_UPDATED_DATE,(SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY WITH(NOLOCK))) = 0
				SET @RESULTS_UPDATE = @@ROWCOUNT							

			--INSERT NO GUID  IN REPORTS
				INSERT INTO CBDB_REPORTS.MMS.MEMBER_SPA_GAR_ATT WITH(TABLOCK) 
				       (HEADER_ID,MEMBER_NO  ,MEMBER_SPA_GAR_GUID     ,FIRST_NAME     ,MIDDLE_NAME     ,LAST_NAME     ,SUFFIX_NAME     ,LAST_UPDATED_DATE     ,FULL_NAME)
				SELECT @HEADER_ID,MSGA.CIF_NO,MSGA.MEMBER_SPA_GAR_GUID,MSGA.FIRST_NAME,MSGA.MIDDLE_NAME,MSGA.LAST_NAME,MSGA.SUFFIX_NAME,MSGA.LAST_UPDATED_DATE,MSGA.LAST_NAME + IIF(LEN(MSGA.FIRST_NAME) > 0,', ',NULL) + MSGA.FIRST_NAME + ' ' + ISNULL(MSGA.MIDDLE_NAME,'')
				FROM CBDB_STAGE.MMS.MEMBER_SPA_GAR_ATT MSGA WITH(NOLOCK)
				LEFT JOIN CBDB_REPORTS.MMS.MEMBER_SPA_GAR_ATT MSGAR WITH(NOLOCK)
					ON MSGA.MEMBER_SPA_GAR_GUID = MSGAR.MEMBER_SPA_GAR_GUID
				WHERE  MSGAR.MEMBER_SPA_GAR_GUID IS NULL --INSERT NEW RECORDS
				--AND DATEDIFF(DAY,MSG.LAST_UPDATED_DATE,(SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY WITH(NOLOCK))) = 0
				SET @RESULTS_INSERT = @@ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS_INSERT + @RESULTS_UPDATE		
				BREAK;
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************MMS.MEMBER_SPA_GAR_ATT[END]**************************/
--PRINT 'TABLE COUNT = ' + CAST(@TABLE_COUNT AS VARCHAR(MAX))
--PRINT 'TABLE_SUCCEEDED = ' + CAST(@TABLE_SUCCEEDED AS VARCHAR(MAX))
/*************************CMN SP LOGGING[END]**************************/
IF @TABLE_COUNT = @TABLE_SUCCEEDED
BEGIN
	SET @DURATION = DATEDIFF(SECOND, (SELECT TOP 1 TIME_STARTED FROM CBDB_REPORTS.RPT.SP_LOG WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE ORDER BY ID DESC), GETDATE())		
	SET @TOTAL_INSERTED_RECORDS = (SELECT TOTAL_DUMP_RECORD + TOTAL_DELTA_RECORD FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER	WHERE ID = @HEADER_ID AND MODULE_CODE = @MODULE_CODE)
	UPDATE CBDB_REPORTS.RPT.SP_LOG
		SET STATUS	   = 4,
			TIME_ENDED = GETDATE(),
			DURATION   = @DURATION,
			INSERTED_RECORDS = @TOTAL_INSERTED_RECORDS
	WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE  AND NAME = @SP_NAME
	PRINT 'STATUS : COMPLETED | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | RECORD COUNT : ' + CAST(@TOTAL_INSERTED_RECORDS AS VARCHAR(MAX)) + ' | TIME ENDED : ' + CAST(GETDATE() AS VARCHAR(MAX)) + ' | DURATION : ' + CONVERT(VARCHAR(50),@DURATION)			       
	PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
END
ELSE
BEGIN
	UPDATE CBDB_REPORTS.RPT.SP_LOG
				SET STATUS = 3
			WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE AND NAME = @SP_NAME
			PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
			PRINT 'STATUS : FAILED     | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | BUSINESS DATE : ' + CAST(@BIZ_DATE AS VARCHAR(MAX)) + ' | PLEASE SEE ERROR DETAILS IN DATA_COPY_DETAIL '
			PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
END
/*************************CMN SP LOGGING[END]**************************/
PRINT '*************************************************************************** ' + @SCHEMA_NAME + ' FINALIZER [END] *********************************************************************************'
END
