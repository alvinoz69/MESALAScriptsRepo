USE [CBDB_STAGE]
GO
DROP PROCEDURE IF EXISTS [dbo].[DMS_FINALIZER]
/****** Object:  StoredProcedure [dbo].[DMS_FINALIZER]    Script Date: 18/10/2019 9:20:56 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_WARNINGS OFF  
GO 
CREATE PROCEDURE [dbo].[DMS_FINALIZER]
AS
BEGIN

/**********************INITIALIZATION*********************/
DECLARE @HEADER_ID BIGINT, @BIZ_DATE DATE, @IS_TABLE_COMPLETED INT, @ROWS_INSERTED INT;
DECLARE @ID_CONTROL BIGINT, @BATCH_SIZE INT = 100000, @RESULTS BIGINT; --VARIABLES FOR BATCH INSERT
DECLARE @MODULE_CODE VARCHAR(50) = 'DEP'
DECLARE @SCHEMA_NAME VARCHAR(50) = 'DMS'
DECLARE @STAGE_TABLE_NAME VARCHAR(100) = ''
DECLARE @REPORT_TABLE_NAME VARCHAR(100) = ''
DECLARE @IS_DUMP BIT = 0
DECLARE @DETAIL_ID BIGINT = 0
DECLARE @ERR_MSG VARCHAR(MAX) = ''
DECLARE @SP_NAME VARCHAR(50) = 'DMS_FINALIZER'
DECLARE @TABLE_COUNT INT = 0			   --FOR SP LOG
DECLARE @TABLE_SUCCEEDED INT = 0		   --FOR SP LOG
DECLARE @TOTAL_INSERTED_RECORDS BIGINT = 0 --FOR SP LOG
DECLARE @DURATION INT = 0
DECLARE @SRC_HEADER_ID BIGINT, @SRC_MODULE_CODE VARCHAR(50), @SRC_SCHEMA_NAME VARCHAR(50)

SET NOCOUNT ON;  --OPTIMIZATION
SELECT @HEADER_ID = ID,@MODULE_CODE = MODULE_CODE,@BIZ_DATE = BUSINESS_DATE FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) 
WHERE ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = @MODULE_CODE);

SET @TABLE_COUNT = ISNULL((SELECT COUNT(TABLE_NAME) FROM CBDB_REPORTS.INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = @SCHEMA_NAME),0)

/*********************************************************/
--CHECK IF HEADER IS NULL THEN BREAK
IF @HEADER_ID IS NULL BEGIN
PRINT '**************************************************************'
PRINT 'SOMETHING WENT WRONG. UNABLE TO GET HEADER_ID OF MODULE : ' + @MODULE_CODE RETURN; END

--CHECK IF PROCESS IS DONE ALREADY, IF SO, THEN BREAK THE PROCESSS
IF EXISTS(SELECT 1 FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(NOLOCK) WHERE BUSINESS_DATE = @BIZ_DATE AND [STATUS] = 4 AND MODULE_CODE = @MODULE_CODE) BEGIN
PRINT '*****************************************'
PRINT 'PROCESS SKIPPED. ' + @MODULE_CODE + ' DATA ALREADY EXISTS.' RETURN; END

/*************************CMN.DATA_COPY_HEADER[START]*************************/
PRINT CHAR(13) + '*************************************************************************** ' + @SCHEMA_NAME + ' FINALIZER *********************************************************************************'
IF NOT EXISTS (SELECT 1 FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(NOLOCK) WHERE BUSINESS_DATE = @BIZ_DATE AND MODULE_CODE = @MODULE_CODE)
BEGIN
	BEGIN TRAN
		SET IDENTITY_INSERT CBDB_REPORTS.CMN.DATA_COPY_HEADER ON
		
		INSERT INTO CBDB_REPORTS.CMN.DATA_COPY_HEADER WITH(TABLOCK) (ID, MODULE_CODE, BUSINESS_DATE, TOTAL_DUMP_RECORD, TOTAL_DELTA_RECORD,TIME_STARTED,[STATUS]) 
			   VALUES (@HEADER_ID, @MODULE_CODE, @BIZ_DATE, 0,0,GETDATE(),1);
		SET IDENTITY_INSERT CBDB_REPORTS.CMN.DATA_COPY_HEADER OFF
	
		INSERT INTO CBDB_REPORTS.RPT.SP_LOG (HEADER_ID  ,NAME	  ,BUSINESS_DATE  ,TIME_STARTED ,STATUS)
								VALUES		(@HEADER_ID ,@SP_NAME ,@BIZ_DATE ,GETDATE()    ,1)
		PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
		PRINT 'STATUS : STARTED   | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | TIME STARTED : ' + CAST(GETDATE() AS VARCHAR(MAX)) + ' | BUSINESS DATE : ' + CAST(@BIZ_DATE AS VARCHAR(MAX))	
	COMMIT TRAN
END 		   																			    
/*************************CMN.DATA_COPY_HEADER[END]**************************/

/*************************DMS.ACCT_ANNUAL_BALANCE[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_ANNUAL_BALANCE'
	SET @REPORT_TABLE_NAME = 'DMS.ACCT_ANNUAL_BALANCE'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.DMS.ACCOUNT_ANNUAL_BALANCE WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.ACCT_ANNUAL_BALANCE WITH(TABLOCK) 
				        (HEADER_ID, ACCOUNT_NO, BUSINESS_YEAR, INT_MONTH1     , INT_MONTH2     , INT_MONTH3     , INT_MONTH4     , INT_MONTH5     , INT_MONTH6     , INT_MONTH7     , INT_MONTH8     , INT_MONTH9     , INT_MONTH10     , INT_MONTH11     , INT_MONTH12     , INTEREST_PAID1, INTEREST_PAID2, INTEREST_PAID3, INTEREST_PAID4, INTEREST_PAID5, INTEREST_PAID6, INTEREST_PAID7, INTEREST_PAID8, INTEREST_PAID9, INTEREST_PAID10, INTEREST_PAID11, INTEREST_PAID12, ANNUAL_DIVIDEND, ADV_UNPOSTED_REASON          ,AD_UNPOSTED_REASON        )
				 SELECT @HEADER_ID, ACCOUNT_NO, BUSINESS_YEAR, INTEREST_MONTH1, INTEREST_MONTH2, INTEREST_MONTH3, INTEREST_MONTH4, INTEREST_MONTH5, INTEREST_MONTH6, INTEREST_MONTH7, INTEREST_MONTH8, INTEREST_MONTH9, INTEREST_MONTH10, INTEREST_MONTH11, INTEREST_MONTH12, INTEREST_PAID1, INTEREST_PAID2, INTEREST_PAID3, INTEREST_PAID4, INTEREST_PAID5, INTEREST_PAID6, INTEREST_PAID7, INTEREST_PAID8, INTEREST_PAID9, INTEREST_PAID10, INTEREST_PAID11, INTEREST_PAID12, ANNUAL_DIVIDEND, ANNUAL_DIV_NON_POSTING_REASON,ANNUAL_DIV_NON_POSTING_REASON
				 FROM CBDB_STAGE.DMS.ACCOUNT_ANNUAL_BALANCE A WITH(NOLOCK)
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE A.ID >= @ID_CONTROL AND A.ID < @ID_CONTROL + @BATCH_SIZE AND A.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN			
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.ACCT_ANNUAL_BALANCE[END]**************************/

/*************************DMS.ACCOUNT_MASTER[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_INFO'
	SET @REPORT_TABLE_NAME = 'DMS.ACCOUNT_MASTER'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.DMS.ACCOUNT_INFO WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME  ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.ACCOUNT_MASTER WITH(TABLOCK)
					  (HEADER_ID  ,ACCOUNT_NO   ,ACCOUNT_NAME   ,ACCOUNT_OPEN_DATE                  ,PRODUCT_MNE                           ,PRODUCT_CODE     ,PRODUCT_DESC                       ,ACCOUNT_TYPE                                                                                ,MEMBER_NO               ,ACCOUNT_STATUS         ,CAPCON_CEILING    ,LEDGER_BAL       ,AVAILABLE_BAL       ,PASSBOOK_BAL       ,FLOAT_BAL       ,FNWCAP_BAL                       ,LAST_FIN_TXN_DATE     ,INACTIV_ANNIV_DATE             ,IS_CLOSE   ,CLOSE_DATE   ,CLOSE_REASON																   ,OLD_ACCT_NO   ,PLACEMENT_AMT																					  ,PLACEMENT_DATE    ,MATURITY_DATE,ROLLOVER_CTR    ,RENEWAL_CTR    ,REFERENCE_NO          ,CCC_LIMIT                         ,INITIAL_DEP_DATE        ,MIN_BAL              ,COMPLETION_AMOUNT     ,INACTIVITY_DAYS_COUNTER            ,DEPOSIT_CODE     ,ACCOUNT_STATUS_CODE    ,FIXED_BALANCE              ,BUFFER_BALANCE               ,MAX_BAL)
				SELECT @HEADER_ID ,AI.ACCOUNT_NO,AI.ACCOUNT_NAME,AI.OPEN_DATE AS 'ACCOUNT_OPEN_DATE',PROD.PRODUCT_MNEMONIC AS 'PRODUCT_MNE',PROD.PRODUCT_CODE,PROD.PRODUCT_NAME AS 'PRODUCT_DESC',CASE WHEN AI.WITH_JOINT_ACCT = 1 THEN 'J' ELSE 'S' END AS 'ACCOUNT_TYPE' /*FOR FURTHER USE*/,AI.CIF_NO AS 'MEMBER_NO',ACT.ACCOUNT_STATUS_NAME, AI.CAPCON_CEILING,AB.LEDGER_BALANCE,AB.AVAILABLE_BALANCE,AB.PASSBOOK_BALANCE,AB.FLOAT_BALANCE,SVC.FNWCAP_AMOUNT AS 'FNWCAP_BAL', AI.LAST_FINANCIAL_TXN,INC.INACTIVE_ANNIV_DATE AS 'INACTIVE_ANNIV_DATE',AI.IS_CLOSE,AI.CLOSE_DATE,IIF(DP_STRS.DESCRIPTION IS NOT NULL, DP_STRS.DESCRIPTION, AI.CLOSE_REASON_CODE),AI.OLD_ACCT_NO, (CASE WHEN LEFT(PROD.PRODUCT_MNEMONIC,2) = 'TD' THEN 0 ELSE AI.PLACEMENT_AMOUNT END) AS 'PLACEMENT_AMOUNT', AI.PLACEMENT_DATE,MATURITY_DATE,AI.ROLLOVER_TYPE,AI.RENEWAL_TERM,NULL AS 'REFERENCE_NO', SVC.CEILING_AMOUNT AS 'CCC_LIMIT', AI.INITIAL_DEPOSIT_DATE,PBAL.MINIMUM_BALANCE ,CFG.COMPLETION_AMOUNT ,AI.INACTIVITY_DAYS_COUNTER ,PROD.DEPOSIT_CODE,AI.ACCOUNT_STATUS_CODE ,ABE.FIXED_BALANCE 'FIXBAL' ,ABE.BUFFER_BALANCE 'BUFFBAL' ,CASE WHEN CL.CLIENT_TYPE  = 'S' THEN POTC.MAX_SECONDARY_MEMBER_BALANCE ELSE PBAL.MAXIMUM_BALANCE END AS 'MAX_BAL'
				FROM CBDB_STAGE.DMS.ACCOUNT_INFO AI WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.DMS.ACCOUNT_BALANCE AB WITH(NOLOCK)
					ON AI.ACCOUNT_NO = AB.ACCOUNT_NO
				LEFT JOIN CBDB_STAGE.DMS.PRODUCT PROD WITH(NOLOCK)
					ON AI.DEPOSIT_PRODUCT_CODE = PROD.DEPOSIT_PRODUCT_CODE
				LEFT JOIN CBDB_STAGE.DMS.ACCOUNT_SERVICES SVC WITH(NOLOCK)
					ON AI.ACCOUNT_NO = SVC.ACCOUNT_NO
				LEFT JOIN CBDB_STAGE.DMS.PRODUCT_BALANCE PBAL WITH(NOLOCK)
					ON PROD.PRODUCT_CODE = RIGHT(PBAL.ORG_DEPOSIT_PRODUCT_CODE,3)
				LEFT JOIN CBDB_STAGE.MMS.CLIENT CL WITH(NOLOCK)
					ON AI.CIF_NO = CL.CIF_NO
				LEFT JOIN CBDB_STAGE.MMS.CFG_CLIENT_CLASSIFICATION CFG WITH(NOLOCK)
					ON CL.CLASSIFICATION_CODE = CFG.CODE
				LEFT JOIN CBDB_STAGE.DMS.CFG_ACCOUNT_STATUS_TYPE ACT WITH(NOLOCK)
					ON AI.ACCOUNT_STATUS_CODE = ACT.ACCOUNT_STATUS_CODE
				LEFT JOIN CBDB_STAGE.DMS.DEPOSIT_PICKLIST DP_STRS WITH(NOLOCK)
					ON AI.CLOSE_REASON_CODE =  DP_STRS.CODE AND DP_STRS.CATEGORY = 'STATUS_REASON'
				LEFT JOIN CBDB_STAGE.DMS.PRODUCT_OTHER_CONFIG POTC WITH(NOLOCK)
					ON PROD.PRODUCT_CODE = RIGHT(POTC.ORG_DEPOSIT_PRODUCT_CODE,3)
				LEFT JOIN CBDB_STAGE.DMS.ACCOUNT_BALANCE_EXT ABE WITH(NOLOCK)
					ON AI.ACCOUNT_NO = ABE.ACCOUNT_NO
				LEFT JOIN 
					(SELECT     AI.ACCOUNT_NO,
						   CASE PIC.INACTIVITY_PERIOD_UNIT	
						        WHEN 1 THEN DATEADD(DAY, PIC.INACTIVITY_PERIOD_VALUE , DATEADD(DAY, -AI.INACTIVITY_DAYS_COUNTER, (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)))
								WHEN 2 THEN DATEADD(WEEK, PIC.INACTIVITY_PERIOD_VALUE , DATEADD(DAY, -AI.INACTIVITY_DAYS_COUNTER, (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)))
								WHEN 3 THEN DATEADD(MONTH, PIC.INACTIVITY_PERIOD_VALUE , DATEADD(DAY, -AI.INACTIVITY_DAYS_COUNTER, (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY)))
								WHEN 4 THEN DATEADD(YEAR, PIC.INACTIVITY_PERIOD_VALUE , DATEADD(DAY, -AI.INACTIVITY_DAYS_COUNTER, (SELECT CURRENT_BUSINESS_DATE FROM CBDB_STAGE.CMN.BANK_SUNDRY))) 
						   END AS 'INACTIVE_ANNIV_DATE'	    
					FROM CBDB_STAGE.DMS.ACCOUNT_INFO AI WITH(NOLOCK)
					INNER JOIN CBDB_STAGE.DMS.PRODUCT_INACTIVE_CHARGE PIC WITH(NOLOCK)
					ON AI.DEPOSIT_PRODUCT_CODE = RIGHT(PIC.ORG_DEPOSIT_PRODUCT_CODE,5)) INC --FOR INACTIVE_ANNIV_DATE
					ON AI.ACCOUNT_NO = INC.ACCOUNT_NO
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE AI.ID >= @ID_CONTROL AND AI.ID < @ID_CONTROL + @BATCH_SIZE AND AI.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.ACCOUNT_MASTER[END]**************************/

/*************************DMS.ACCOUNT_BAL_HISTORY**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_BALANCE_HISTORY'
	SET @REPORT_TABLE_NAME = 'DMS.ACCOUNT_BAL_HISTORY'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.DMS.ACCOUNT_BALANCE_HISTORY WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.ACCOUNT_BAL_HISTORY WITH(TABLOCK)
					(HEADER_ID   ,ABH.ACCOUNT_NO,CHANNEL_TYPE    ,AMOUNT     ,TRAN_CODE    ,TRAN_DESC                     ,MNEMONIC      ,TRAN_TYPE     ,TRAN_DATE     ,BRANCH_CODE    ,USER_NAME    ,SEQUENCENO     ,IS_REVERSAL     ,REVERSAL_ID     ,AVAILABLE_BALANCE    ,FLOAT_BALANCE    ,LEDGER_BALANCE    ,SOA_APPLICABLE      ,HOST_ID     , REFERENCE_NO)
				SELECT @HEADER_ID,ABH.ACCOUNT_NO,ABH.CHANNEL_TYPE, ABH.AMOUNT,ABH.TRAN_CODE, ITEM.TRAN_NAME AS 'TRAN_DESC', ITEM.MNEMONIC, ABH.TRAN_TYPE, ABH.TRAN_DATE,ABH.BRANCH_CODE,ABH.USER_NAME, ABH.SEQUENCENO, ABH.IS_REVERSAL, ABH.REVERSAL_ID,ABH.AVAILABLE_BALANCE,ABH.FLOAT_BALANCE,ABH.LEDGER_BALANCE,ITEM.SOA_APPLICABLE ,ABH.HOST_ID , BZ.REFERENCE_NO
				FROM CBDB_STAGE.DMS.ACCOUNT_BALANCE_HISTORY ABH WITH(NOLOCK)
				LEFT JOIN CBDB_STAGE.CMN.TRAN_ITEM ITEM WITH(NOLOCK) ON ABH.TRAN_CODE = ITEM.TRAN_CODE
				LEFT JOIN CBDB_STAGE.DMS.BIZ_JOURNAL BZ WITH(NOLOCK) ON ABH.ACCOUNT_NO = BZ.ACCOUNT_NO
																	AND ABH.TRAN_CODE = BZ.TRAN_CODE
																	AND ABH.TRAN_DATE = BZ.TRAN_DATE
																	AND ABH.BRANCH_CODE = BZ.BRANCH_CODE
																	AND ABH.SEQUENCENO = BZ.SEQUENCE_NO
																	AND ABH.USER_NAME = ABH.USER_NAME
			--->END OF INSERT INTO SELECT STATEMENT		
					   WHERE ABH.ID >= @ID_CONTROL AND ABH.ID < @ID_CONTROL + @BATCH_SIZE  AND ABH.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.ACCOUNT_BAL_HISTORY[END]**************************/

/*************************DMS.TD_ACCOUNT_INFO[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'ACCOUNT_INFO'
	SET @REPORT_TABLE_NAME = 'DMS.TD_ACCOUNT_INFO'
	SET @IS_DUMP = 1 --AUTO-DUMP TABLE
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.DMS.ACCOUNT_INFO WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		--SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.TD_ACCOUNT_INFO WITH(TABLOCK)
					(HEADER_ID   ,ACCOUNT_NO   ,PLACEMENT_NO     ,ROLLOVER_COUNTER     ,INTEREST_RATE     ,TERM_VALUE           ,TERM_UNIT           ,PRETERM_DATE              ,AUTO_ROLLOVER    ,PLACEMENT_STATUS     ,CREDIT_ACCOUNT     ,PLACEMENT_AMOUNT    ,PLACEMENT_DATE,MATURITY_DATE     ,TERMINATION_DATE          ,LAST_CREDIT_DATE    ,LAST_UPDATED_DATE     ,LAST_UPDATED_BY    ,LAST_APPROVED_BY     ,LAST_UPDATED_BRANCH ,TERMINATION_REASON                                                             ,IS_CLOSED    ,INTEREST_AMOUNT	,TOTAL_INTEREST_AMOUNT	,TOTAL_INTEREST_PAID)
				SELECT @HEADER_ID,AI.ACCOUNT_NO, APL.PLACEMENT_NO, APL.ROLLOVER_COUNTER, APL.INTEREST_RATE, TERM_FREQUENCY_VALUE, TERM_FREQUENCY_UNIT, APL.PRE_TERMINATION_DATE ,APL.AUTO_ROLLOVER, APL.PLACEMENT_STATUS, APL.CREDIT_ACCOUNT,API.PLACEMENT_AMOUNT,API.OPEN_DATE , API.MATURITY_DATE, APL.PRE_TERMINATION_DATE ,APL.LAST_CREDIT_DATE, APL.LAST_UPDATED_DATE,APL.LAST_UPDATED_BY, APL.LAST_APPROVED_BY, LAST_UPDATED_BRANCH,IIF(DP_STRS.DESCRIPTION IS NOT NULL, DP_STRS.DESCRIPTION, AI.CLOSE_REASON_CODE),API.IS_CLOSE ,API.INTEREST_AMOUNT,API.TOTAL_INTEREST_AMOUNT,API.TOTAL_INTEREST_PAID
				FROM CBDB_STAGE.DMS.ACCOUNT_INFO AI WITH(NOLOCK)
				INNER JOIN CBDB_STAGE.DMS.ACCOUNT_PLACEMENT APL WITH(NOLOCK) ON AI.ACCOUNT_NO = APL.ACCOUNT_NO
				LEFT JOIN CBDB_STAGE.DMS.PRODUCT PROD WITH(NOLOCK) ON AI.DEPOSIT_PRODUCT_CODE = PROD.DEPOSIT_PRODUCT_CODE
				LEFT JOIN CBDB_STAGE.DMS.ACCOUNT_PLACEMENT_ITEM API WITH(NOLOCK) ON AI.ACCOUNT_NO = API.ACCOUNT_NO  AND API.ID = (SELECT TOP 1 ID FROM CBDB_STAGE.DMS.ACCOUNT_PLACEMENT_ITEM WHERE ACCOUNT_NO = API.ACCOUNT_NO ORDER BY MATURITY_DATE DESC)
				LEFT JOIN CBDB_STAGE.DMS.DEPOSIT_PICKLIST DP_STRS WITH(NOLOCK) ON AI.CLOSE_REASON_CODE =  DP_STRS.CODE AND DP_STRS.CATEGORY = 'STATUS_REASON'
				WHERE PROD.DEPOSIT_CODE = '04'
			--->END OF INSERT INTO SELECT STATEMENT		
				--AND AI.ID >= @ID_CONTROL AND AI.ID < @ID_CONTROL + @BATCH_SIZE AND AI.HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
				BREAK;
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.TD_ACCOUNT_INFO[END]**************************/

/*************************DMS.PRODUCT_INACTIVE_CHARGE[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'PRODUCT_INACTIVE_CHARGE'
	SET @REPORT_TABLE_NAME = 'DMS.PRODUCT_INACTIVE_CHARGE'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.DMS.PRODUCT_INACTIVE_CHARGE WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.PRODUCT_INACTIVE_CHARGE WITH(TABLOCK)
					   (HEADER_ID ,ORG_DEPOSIT_PRODUCT_CODE ,CHARGE_CODE ,CHARGE_PERIOD_VALUE ,CHARGE_PERIOD_UNIT ,CHARGE_GENERATE_LETTER_VALUE ,CHARGE_GENERATE_LETTER_UNIT ,INACTIVITY_PERIOD_VALUE ,INACTIVITY_PERIOD_UNIT ,TRANSACTION_CODE ,EFFECTIVE_DATE ,LAST_UPDATED_DATE ,LAST_UPDATED_BY ,LAST_APPROVED_BY ,DORMANCY_CHARGE)
				SELECT @HEADER_ID ,ORG_DEPOSIT_PRODUCT_CODE ,CHARGE_CODE ,CHARGE_PERIOD_VALUE ,CHARGE_PERIOD_UNIT ,CHARGE_GENERATE_LETTER_VALUE ,CHARGE_GENERATE_LETTER_UNIT ,INACTIVITY_PERIOD_VALUE ,INACTIVITY_PERIOD_UNIT ,TRANSACTION_CODE ,EFFECTIVE_DATE ,LAST_UPDATED_DATE ,LAST_UPDATED_BY ,LAST_APPROVED_BY ,DORMANCY_CHARGE
				FROM CBDB_STAGE.DMS.PRODUCT_INACTIVE_CHARGE WITH(NOLOCK)

			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ID >= @ID_CONTROL AND ID < @ID_CONTROL + @BATCH_SIZE AND HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.PRODUCT_INACTIVE_CHARGE[END]**************************/

/*************************DMS.TRAN_ATM_WITHDRAWAL[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'TRAN_ATM_WITHDRAWAL'
	SET @REPORT_TABLE_NAME = 'DMS.TRAN_ATM_WITHDRAWAL'
	SET @SRC_SCHEMA_NAME = 'BDS'
	SET @SRC_HEADER_ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = 'COR')
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.BDS.TRAN_ATM_WITHDRAWAL WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @SRC_HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.TRAN_ATM_WITHDRAWAL WITH(TABLOCK)
					   (HEADER_ID ,BRANCH_ID ,TRAN_JOURNAL_ID ,MEMBER_NO	 ,FULL_NAME ,BANK_CODE ,CREDIT_ACCOUNT_NO ,CREDIT_ACCOUNT_NAME ,AMOUNT ,STATUS ,DATE)
				SELECT @HEADER_ID ,BRANCH_ID ,TRAN_JOURNAL_ID ,MEMBERSHIP_NO ,FULL_NAME ,BANK_CODE ,CREDIT_ACCOUNT_NO ,CREDIT_ACCOUNT_NAME ,AMOUNT ,STATUS ,DATE
				FROM CBDB_STAGE.BDS.TRAN_ATM_WITHDRAWAL WITH(NOLOCK)
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ID >= @ID_CONTROL AND ID < @ID_CONTROL + @BATCH_SIZE AND HEADER_ID = @SRC_HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.TRAN_ATM_WITHDRAWAL[END]**************************/

/*************************DMS.TRAN_ATM_SUB_WITHDRAWAL[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'TRAN_ATM_SUB_WITHDRAWAL'
	SET @REPORT_TABLE_NAME = 'DMS.TRAN_ATM_SUB_WITHDRAWAL'
	SET @SRC_SCHEMA_NAME = 'BDS'
	SET @SRC_HEADER_ID = (SELECT MAX(ID) FROM CBDB_STAGE.CMN.DATA_COPY_HEADER (NOLOCK) WHERE MODULE_CODE = 'COR')
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.BDS.TRAN_ATM_SUB_WITHDRAWAL WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @SRC_HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SRC_SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.TRAN_ATM_SUB_WITHDRAWAL WITH(TABLOCK)
					   (HEADER_ID ,ATM_ID ,DEBIT_ACCOUNT_NO ,DEBIT_ACCOUNT_NAME ,DEBIT_AMOUNT ,REFERENCE_NO)
				SELECT @HEADER_ID ,ATM_ID ,DEBIT_ACCOUNT_NO ,DEBIT_ACCOUNT_NAME ,DEBIT_AMOUNT ,REFERENCE_NO
				FROM CBDB_STAGE.BDS.TRAN_ATM_SUB_WITHDRAWAL WITH(NOLOCK)
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ID >= @ID_CONTROL AND ID < @ID_CONTROL + @BATCH_SIZE AND HEADER_ID = @SRC_HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.TRAN_ATM_SUB_WITHDRAWAL[END]**************************/

/*************************DMS.CFG_EDA[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'CFG_EDA'
	SET @REPORT_TABLE_NAME = 'DMS.CFG_EDA'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.DMS.CFG_EDA WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.CFG_EDA WITH(TABLOCK)
					   (HEADER_ID ,BUSINESS_YEAR ,ANNUAL_DIV_RATE ,ANNUAL_DIV_DATE ,ADVANCE_ESTIMATED_DIV ,AED_PERIOD_FROM ,AED_PERIOD_TO ,LAST_UPDATED_DATE ,LAST_UPDATED_BY ,LAST_APPROVED_BY ,AED_PERCENTAGE)
				SELECT @HEADER_ID ,BUSINESS_YEAR ,ANNUAL_DIV_RATE ,ANNUAL_DIV_DATE ,ADVANCE_ESTIMATED_DIV ,AED_PERIOD_FROM ,AED_PERIOD_TO ,LAST_UPDATED_DATE ,LAST_UPDATED_BY ,LAST_APPROVED_BY ,AED_PERCENTAGE
				FROM CBDB_STAGE.DMS.CFG_EDA WITH(NOLOCK)
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ID >= @ID_CONTROL AND ID < @ID_CONTROL + @BATCH_SIZE AND HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.CFG_EDA[END]**************************/

/*************************DMS.PRODUCT_STATUS[START]**************************/
BEGIN
	SET @STAGE_TABLE_NAME = 'PRODUCT_STATUS'
	SET @REPORT_TABLE_NAME = 'DMS.PRODUCT_STATUS'
	--START OF SET TO INSERT
	SELECT @ID_CONTROL = ISNULL((SELECT MIN(ID) FROM CBDB_STAGE.DMS.PRODUCT_STATUS WITH(NOLOCK) WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @STAGE_TABLE_NAME AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC)), 0)
	
	--CHECK STATUS IF COMPLETED
	SET @IS_TABLE_COMPLETED = ISNULL((SELECT TOP 1 [STATUS] FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @REPORT_TABLE_NAME AND HEADER_ID = @HEADER_ID ORDER BY ID DESC),0)
	--LOGGED IF PROCESS ALREADY COMPLETED
	IF (@IS_TABLE_COMPLETED = 4) BEGIN  PRINT @REPORT_TABLE_NAME + ' IS ALREADY COMPLETED.' SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1 END
	IF @IS_TABLE_COMPLETED <> 4
	BEGIN
		SET @IS_DUMP = ISNULL((SELECT TOP 1 IS_DUMP FROM CBDB_STAGE.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE TABLE_NAME = @STAGE_TABLE_NAME AND HEADER_ID = @HEADER_ID AND SCHEMA_NAME = @SCHEMA_NAME ORDER BY ID DESC),0)
		
		--IF TABLE HAS ERROR PREVIOUSLY, DELETE ALL RECORDS FROM TABLE WITH CURRENT HEADER_ID	
		IF @IS_TABLE_COMPLETED = 3
		BEGIN
			EXEC ('DELETE FROM CBDB_REPORTS.' + @REPORT_TABLE_NAME + ' WHERE HEADER_ID = (SELECT TOP 1 HEADER_ID FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = ' + @HEADER_ID +' AND TABLE_NAME=' + ''''+ @REPORT_TABLE_NAME + ''''+' ORDER BY ID DESC)')
		END

		--IF DUMP, TRUNCATE THE TABLE BEFORE INSERTING
		IF @IS_DUMP = 1 AND @REPORT_TABLE_NAME IS NOT NULL
		BEGIN
			EXEC ('TRUNCATE TABLE CBDB_REPORTS.' + @REPORT_TABLE_NAME)
		END

		--LOG START
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = 0, @STATUS = 1, @IS_DUMP = @IS_DUMP, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
		END

		SET @DETAIL_ID = ISNULL((SELECT MAX(ID) FROM CBDB_REPORTS.CMN.DATA_COPY_DETAIL WITH(NOLOCK) WHERE HEADER_ID = @HEADER_ID AND TABLE_NAME = @REPORT_TABLE_NAME),0)
		--BATCH INSERT OF 100000
		BEGIN TRY
			SELECT @ROWS_INSERTED = 0,			
				   @RESULTS = 1; --STORES THE ROW COUNT A0FTER EACH SUCCESSFUL BATCH
			WHILE (@RESULTS > 0)
			BEGIN
			--->INSERT INTO SELECT STATEMENT
				INSERT INTO CBDB_REPORTS.DMS.PRODUCT_STATUS WITH(TABLOCK)
					   (HEADER_ID ,ORG_DEPOSIT_PRODUCT_CODE ,ACCOUNT_STATUS_TYPE_CODE ,ACCOUNT_STATUS_TYPE_NAME ,NUMBER_OF_FREQUENCY_VALUE ,NUMBER_OF_FREQUENCY_UNIT ,GENERATE_LETTER_VALUE ,GENERATE_LETTER_UNIT ,UPWARD_TRANSACTION_FLAG ,DEPOSIT_PR_AC_STTS_TYPE_ED_COD)
				SELECT @HEADER_ID ,ORG_DEPOSIT_PRODUCT_CODE ,ACCOUNT_STATUS_TYPE_CODE ,ACCOUNT_STATUS_TYPE_NAME ,NUMBER_OF_FREQUENCY_VALUE ,NUMBER_OF_FREQUENCY_UNIT ,GENERATE_LETTER_VALUE ,GENERATE_LETTER_UNIT ,UPWARD_TRANSACTION_FLAG ,DEPOSIT_PR_AC_STTS_TYPE_ED_COD
				FROM CBDB_STAGE.DMS.PRODUCT_STATUS WITH(NOLOCK)
			--->END OF INSERT INTO SELECT STATEMENT		
				WHERE ID >= @ID_CONTROL AND ID < @ID_CONTROL + @BATCH_SIZE AND HEADER_ID = @HEADER_ID	--BATCH CONTROL OF THE CURRENT BATCH	
				SET @RESULTS = @@ROWCOUNT --OBTAINING LATEST ROWCOUNT
				SET @ROWS_INSERTED = @RESULTS + @ROWS_INSERTED
				SET @ID_CONTROL = @ID_CONTROL + @BATCH_SIZE --NEXT BATCH
			END
		END TRY
		BEGIN CATCH
			SET @ERR_MSG = ERROR_MESSAGE()
			INSERT INTO CBDB_REPORTS.RPT.ERROR_DETAILS ([ERROR_NUMBER],[ERROR_SEVERITY],[ERROR_STATE],[ERROR_LINE],[ERROR_MESSAGE],[ERROR_TABLE],[TRANCOUNT],[REMARKS],[DATE_OCCURED])
			VALUES (ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(),ERROR_LINE(),ERROR_MESSAGE(),@REPORT_TABLE_NAME, CONVERT(varchar, @@TRANCOUNT),'',GETDATE());
			--LOG AFTER ERROR
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @STATUS = 3, @FAIL_EXCEPTION = @ERR_MSG, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME;
			THROW; --THROW ERROR TO FE
		END CATCH

		--LOG FINISH IF THE TABLE HAS NO ERROR 
		IF @ERR_MSG IS NULL OR @ERR_MSG = ''
		BEGIN
			EXEC LOG_DETAILS @COPY_HEADER_ID = @HEADER_ID, @COPY_DETAIL_ID = @DETAIL_ID, @TABLE_NAME = @REPORT_TABLE_NAME, @BUS_DATE = @BIZ_DATE, @RECORD_COUNT = @ROWS_INSERTED, @STATUS = 4, @MODULE_CODE = @MODULE_CODE, @SCHEMA_NAME = @SCHEMA_NAME, @STAGE_TABLE_NAME = @STAGE_TABLE_NAME
			SET @TABLE_SUCCEEDED = @TABLE_SUCCEEDED + 1
		END

		--CLEAR VARIABLES
		SET @STAGE_TABLE_NAME = ''
		SET @REPORT_TABLE_NAME = ''
		SET @IS_DUMP = 0
		SET @DETAIL_ID = 0
		SET @ERR_MSG = ''
	END
END
/*************************DMS.PRODUCT_STATUS[END]**************************/

EXEC CBDB_STAGE.DBO.RPT_CDTR

/*************************DMS SP LOGGING[END]**************************/
IF @TABLE_COUNT = @TABLE_SUCCEEDED
BEGIN
	SET @DURATION = DATEDIFF(SECOND, (SELECT TOP 1 TIME_STARTED FROM CBDB_REPORTS.RPT.SP_LOG WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE ORDER BY ID DESC), GETDATE())		
	SET @TOTAL_INSERTED_RECORDS = (SELECT TOTAL_DUMP_RECORD + TOTAL_DELTA_RECORD FROM CBDB_REPORTS.CMN.DATA_COPY_HEADER	WHERE ID = @HEADER_ID AND MODULE_CODE = @MODULE_CODE)
	UPDATE CBDB_REPORTS.RPT.SP_LOG
		SET STATUS	   = 4,
			TIME_ENDED = GETDATE(),
			DURATION   = @DURATION,
			INSERTED_RECORDS = @TOTAL_INSERTED_RECORDS
	WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE  AND NAME = @SP_NAME
	PRINT 'STATUS : COMPLETED | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | RECORD COUNT : ' + CAST(@TOTAL_INSERTED_RECORDS AS VARCHAR(MAX)) + ' | TIME ENDED : ' + CAST(GETDATE() AS VARCHAR(MAX)) + ' | DURATION : ' + CONVERT(VARCHAR(50),@DURATION)			       
	PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
END
ELSE
BEGIN
	UPDATE CBDB_REPORTS.RPT.SP_LOG
				SET STATUS = 3
			WHERE HEADER_ID = @HEADER_ID AND BUSINESS_DATE = @BIZ_DATE AND NAME = @SP_NAME
			PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
			PRINT 'STATUS : FAILED     | PROCEDURE NAME : ' + @SP_NAME + ' | HEADER_ID : ' + CAST(@HEADER_ID AS VARCHAR(MAX)) + ' | BUSINESS DATE : ' + CAST(@BIZ_DATE AS VARCHAR(MAX)) + ' | PLEASE SEE ERROR DETAILS IN DATA_COPY_DETAIL '
			PRINT '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------'
END
/*************************DMS SP LOGGING[END]**************************/
PRINT '*************************************************************************** ' + @SCHEMA_NAME + ' FINALIZER [END] *********************************************************************************'
END
